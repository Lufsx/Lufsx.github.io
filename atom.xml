<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lufs&#39;s Blog</title>
  <icon>https://cdn.jsdelivr.net/gh/lufsx/res@0.1.1/favicon/favicon-32x32.png</icon>
  
  <link href="https://blog.isteed.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.isteed.cc/"/>
  <updated>2021-02-11T16:00:00.000Z</updated>
  <id>https://blog.isteed.cc/</id>
  
  <author>
    <name>Lufs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021 新春快乐</title>
    <link href="https://blog.isteed.cc/post/2021-happy-spring-festival/"/>
    <id>https://blog.isteed.cc/post/2021-happy-spring-festival/</id>
    <published>2021-02-11T16:00:00.000Z</published>
    <updated>2021-02-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>春节快乐！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;春节快乐！&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="2021" scheme="https://blog.isteed.cc/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>玩机的必备操作 —— Pixel3 安装 Magisk</title>
    <link href="https://blog.isteed.cc/post/pixel-3-install-magisk/"/>
    <id>https://blog.isteed.cc/post/pixel-3-install-magisk/</id>
    <published>2021-02-09T17:58:28.000Z</published>
    <updated>2021-02-09T18:10:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在想要好好的玩机，那就必须先具有「万恶之源」—— Magisk</p><span id="more"></span><h1 id="缘起">缘起</h1><p>在我曾使用的机型中，无一例外都是使用 <a href="https://twrp.me/">TWRP</a> 直接刷入 <a href="https://github.com/topjohnwu/Magisk/releases">Magisk 安装包</a></p><p>而 Pixel 3 却不同，它的 TWRP 无法挂载某些分区、无法解密 data、也无法通过我以前常用的 <code>ADB SIDELOAD</code> 了</p><p>怎么解决呢？那就是回归 Magisk 的核心 —— Boot。</p><p>「很久」以前，Magisk 就已经使用 <code>systemless</code> 了，既不修改 <code>system</code> 分区，通过修改 boot 挂载点来挂载 <code>su</code> 获取 root 权限（虽然现在不是挂载 <code>su</code> 了）</p><h1 id="准备工作">准备工作</h1><p>⚠️ 注意：下文默认电脑已具有<strong>正确的 ADB 环境</strong>，具体配置教程可看少数派文章 —— <a href="https://sspai.com/post/57427">如何从零开始使用 adb</a></p><h2 id="解锁-Bootloader">解锁 Bootloader</h2><p>折腾这些的大前提便是解锁 Bootloader，所以本教程并不适用于<strong>无法解锁 Bootloader</strong> 的机子哦</p><p>这里就简单说一下解锁步骤</p><ol><li>手机：<code>开发者选项</code> - <code>OEM 解锁</code> - 打开 - 重启进入 <code>fastboot</code> 模式（<code>电源键</code> + <code>音量减</code>）</li><li>电脑：连接手机 - 执行 <code>fastboot flashing unlock</code></li><li>手机：按音量键直到看见 <code>Unlock the bootloader</code> - 按电源键确认</li></ol><div class="toast toast-error">⚠️ 注意：解锁会抹除所有数据，请一定要备份好重要数据后再解锁</div><h2 id="准备修补镜像">准备修补镜像</h2><p>既然已经解锁了，那么刷就完事儿了，既然要通过刷入修补后的 boot 镜像解决，那么 boot 镜像又从哪儿来？</p><p>那当然是从 Google 官方的<a href="https://developers.google.com/android/images#blueline">工厂镜像</a>来～</p><p>个人可以提供一份适用于 <strong>Pixel 3</strong> 的修补后镜像，如果你的机型和版本号与我的一致，便可不用自行修补，直接跳到 <a href="#%E5%AE%89%E8%A3%85">安装</a></p><ul><li><a href="https://storage.isteed.cc/Pixel3/Magisk/"><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-onedrive.svg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-onedrive.svg" alt="OneDrive"></a></li></ul><h3 id="修补教程">修补教程</h3><p>从 Google 官方的<a href="https://developers.google.com/android/images#blueline">工厂镜像</a>下载对应机型与版本号的工厂镜像，版本号可以在 <code>设置</code> - <code>关于手机</code> - <code>Android 版本</code> - <code>版本号</code> 中看到</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/aboutPhone.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/aboutPhone.png" alt="aboutPhone"></p><p>接着将下载下来的工厂镜像解压，得到下面这些文件</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/file.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/file.png" alt="file"></p><p>看到里面哪个 <code>zip</code> 文件了嘛？就是他，再解压一次，得到下面这些文件～</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/file2.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/file2.png" alt="file2"></p><p>把里面的 <code>boot.img</code> 传到手机上，用 <code>Magisk Manager</code> 修补</p><p><code>Magisk Manager</code> - <code>安装</code> - <code>选择并修补一个文件</code> - <code>开始</code></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/magiskFixBoot.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/magiskFixBoot.png" alt="MagiskFixBoot"></p><p>至此，修补后的 boot 镜像就做好了，将它传到电脑上备用即可</p><h1 id="安装">安装</h1><ol><li><p>手机进入 <code>fastboot</code> 模式（开机时按住 <code>电源键</code> + <code>音量减</code>）</p></li><li><p>电脑连接手机，执行 <code>fastboot boot /path/to/boot.img</code><br>其中，<code>/path/to/boot.img</code> 为你修补后的镜像位置<br>这时手机将会开机，拥有临时的 Magisk 了</p></li><li><p>手机打开 <code>Magisk Manager</code>，再次安装 Magisk<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/magiskInstall.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/pixel-3-install-magisk/magiskInstall.png" alt="MagiskInstall"></p></li><li><p>Enjoy!</p></li></ol><h1 id="其它">其它</h1><h2 id="保留-Magisk-升级">保留 Magisk 升级</h2><p>适用于所有的<strong>具有 A/B 分区</strong>的手机</p><ol><li>升级前 <code>卸载 Magisk</code> - <code>还原原厂镜像</code></li><li>检查系统更新，安装系统更新，并等待系统更新完成</li><li>系统更新安装完成后进入 <code>Magisk Manager</code> - <code>安装</code> - <code>安装到未使用的槽位</code></li><li>点击重启</li></ol><h1 id="碎碎念">碎碎念</h1><p>Magisk 真好用 -&gt; Android 真好玩 -&gt; iOS 真的香 🤪</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在想要好好的玩机，那就必须先具有「万恶之源」—— Magisk&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="Google" scheme="https://blog.isteed.cc/tags/Google/"/>
    
    <category term="Magisk" scheme="https://blog.isteed.cc/tags/Magisk/"/>
    
    <category term="OTA" scheme="https://blog.isteed.cc/tags/OTA/"/>
    
    <category term="Pixel 3" scheme="https://blog.isteed.cc/tags/Pixel-3/"/>
    
    <category term="root" scheme="https://blog.isteed.cc/tags/root/"/>
    
  </entry>
  
  <entry>
    <title>水深火热的电信用户自救指南 —— Pixel 3 破解电信</title>
    <link href="https://blog.isteed.cc/post/pixel-3-crack-ct/"/>
    <id>https://blog.isteed.cc/post/pixel-3-crack-ct/</id>
    <published>2021-01-09T17:27:27.000Z</published>
    <updated>2021-02-09T17:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pixel 3/XL 这一代破解电信特别的简单（破事水</p><span id="more"></span><p>电信的配置文件本来就存在，就是并没有被启用而已，所以只要使用 Magisk 修改一个类似于「启用列表」的东西就可以完成破解啦</p><p>（没 Magisk 的看这里↓）</p><p><a href="/post/pixel-3-install-magisk/#%E5%AE%89%E8%A3%85">玩机的必备操作 —— Pixel3 安装 Magisk</a></p><h1 id="模块链接">模块链接</h1><ul><li><a href="https://lufs.lanzous.com/b04b6an9e"><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-lanzou.svg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-lanzou.svg" alt="蓝奏云"></a><br>密码：<code>pixel</code></li><li><a href="https://storage.isteed.cc/Pixel3/crack_ct/"><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-onedrive.svg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/svg/download-from-onedrive.svg" alt="OneDrive"></a></li></ul><h1 id="破解过程">破解过程</h1><p>前置要求：已刷入 Magisk</p><ol><li><p>Magisk 刷入 <code>Chinese_SIM_Supporter.zip</code></p></li><li><p>Enjoy!</p></li></ol><h1 id="这个模块干了啥？">这个模块干了啥？</h1><p>帮你修改了「启用列表」，并开启了 <code>VoLTE</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pixel 3/XL 这一代破解电信特别的简单（破事水&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="VoLTE" scheme="https://blog.isteed.cc/tags/VoLTE/"/>
    
    <category term="Google" scheme="https://blog.isteed.cc/tags/Google/"/>
    
    <category term="电信" scheme="https://blog.isteed.cc/tags/%E7%94%B5%E4%BF%A1/"/>
    
    <category term="Pixel 3" scheme="https://blog.isteed.cc/tags/Pixel-3/"/>
    
  </entry>
  
  <entry>
    <title>2021 元旦快乐</title>
    <link href="https://blog.isteed.cc/post/2021-happy-new-year/"/>
    <id>https://blog.isteed.cc/post/2021-happy-new-year/</id>
    <published>2020-12-31T16:00:01.000Z</published>
    <updated>2021-07-13T08:42:33.546Z</updated>
    
    <content type="html"><![CDATA[<p><strong>元旦快乐！</strong></p><span id="more"></span><p>希望今年能够过的安好～</p><p>（今年也是咕咕咕的一年</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;元旦快乐！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="水一水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4%E4%B8%80%E6%B0%B4/"/>
    
    <category term="2021" scheme="https://blog.isteed.cc/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>2020 年度总结</title>
    <link href="https://blog.isteed.cc/post/2020-summary/"/>
    <id>https://blog.isteed.cc/post/2020-summary/</id>
    <published>2020-12-31T14:56:03.000Z</published>
    <updated>2021-02-21T10:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>2020 年真是魔幻的一年，过的还算顺利，疫情让我无聊的整这儿整哪儿，知道了许多新的东西，是时候总结一下啦 😆</p><h1 id="关于网站">关于网站</h1><h2 id="博客">博客</h2><p>博客的搜索统计：<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/blog-search.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/blog-search.png" alt="blog search"></p><p>博客的访客统计：<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/blog-views.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/blog-views.png" alt="blog views"></p><p>今年年初，宅家打了许久的游戏，也因为网上授课等一系列原因，写了「许多」的博文，虽然写的不咋地，但教程向的文章好歹是可以看懂的</p><p>比如<a href="/post/fuck-dingtalk-live/">下载钉钉直播 or 录播回放</a>这篇，就在二月前后有着「巨大」的点击量，至于十一月那段时间的，我也不知道是啥 🤪</p><h2 id="网盘">网盘</h2><p>今年整了个网盘，存放一些好玩的「小玩意」和自己看的番剧，这些资源也可能帮助到其他人</p><p>网盘的访客统计：<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/storage-views.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/2020-summary/storage-views.png" alt="storage views"></p><p>这个网盘也让我知道长期维护一个东西是多么困难，尽力维护下去吧……</p><h1 id="2020-的收获？">2020 的收获？</h1><p>真真正正的认识到自己究竟有多菜，也因此大略的了解了一下各方面的事物 🤣</p><p>完成了自己学习上的小目标（觉得年级那边水分好大</p><p>可能养成中英文间空格的好习惯 😋</p><h2 id="硬件">硬件</h2><h3 id="手机">手机</h3><ul><li>Apple iPhone Xʀ：家人淘汰<ul><li>壳膜一套</li></ul></li><li>Google Pixel 3：二手购入</li></ul><p>Pixel 2 已出售，最终留下 iPhone Xʀ 与 Pixel 3</p><h3 id="其他硬件">其他硬件</h3><ul><li>小米 GaN 充电器 Type-C 65W</li><li>Magsafe2 诱骗线</li><li>SanDisk 内存卡 32G</li><li>绿联 Type-C 移动硬盘盒 2.5 英寸</li><li>RK 61 键机械键盘</li><li>紫米 20000mAh 移动电源 27W 高配版</li><li>Apple Lightning to 3.5mm 转接头</li><li>水月雨无名 Nameless 带麦版</li></ul><h2 id="软件">软件</h2><h3 id="Android">Android</h3><ul><li>Termux:Styling</li><li>IDM+</li><li>机械迷城</li><li>Rusty Lake Hotel</li><li>Rusty Lake Paradise</li><li>Rusty Lake: Roots</li><li>Device Info HW+</li></ul><h3 id="iOS">iOS</h3><ul><li>Shadowrocket</li><li>熊猫吃短信</li><li>色比</li><li>iko</li><li>PicTailor</li><li>人类跌落梦境</li></ul><h3 id="Steam">Steam:</h3><ul><li>Stardew Valley</li></ul><h3 id="订阅">订阅</h3><ul><li>通知滤盒 FilterBox 终身版</li><li>哔哩哔哩 年度大会员</li></ul><h1 id="Foretime-Future-Flag">Foretime/Future/Flag</h1><p>去年年度总结的十个目标，已经完成了五个啦，但由于之前定目标定的不太清晰，有些就是模棱两可，权当作没完成吧</p><p>今年的目标就的定的清晰一些了</p><ul><li><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">级排总分前 40</label></li><li><input type="checkbox" id="checkbox1"><label for="checkbox1">假期带机去扫街</label></li><li><input type="checkbox" id="checkbox2"><label for="checkbox2">投稿一个视频</label></li><li><input type="checkbox" id="checkbox3"><label for="checkbox3">鼠须管配置</label></li><li><input type="checkbox" id="checkbox4"><label for="checkbox4">初识 Kotlin</label></li><li><input type="checkbox" id="checkbox5"><label for="checkbox5">将网盘维护下去（没意外情况的话</label></li><li><input type="checkbox" id="checkbox6" checked="true"><label for="checkbox6">购买服务器开今年的最后一次 Minecraft 服务器</label></li><li><input type="checkbox" id="checkbox7"><label for="checkbox7"></label><s>控制每周其它支出在 120 以内</s></li><li><input type="checkbox" id="checkbox8"><label for="checkbox8">顺利、开心、安全的度过 2021</label></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;2020 年真是魔幻的一年，过的还算顺利，疫情让我无聊的整这儿整哪儿，知道了许多新的东西，是时候总结一下啦 😆&lt;/p&gt;
&lt;h1 id=&quot;关于网站&quot;&gt;关于网站&lt;/h1&gt;
&lt;h2 id=&quot;博客&quot;&gt;博客&lt;/h2&gt;
&lt;p&gt;博客的搜索统计：&lt;</summary>
      
    
    
    
    <category term="总结" scheme="https://blog.isteed.cc/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年度总结" scheme="https://blog.isteed.cc/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    <category term="2020" scheme="https://blog.isteed.cc/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>记 一好看的 OneDrive 目录索引</title>
    <link href="https://blog.isteed.cc/post/storage-of-onedrive/"/>
    <id>https://blog.isteed.cc/post/storage-of-onedrive/</id>
    <published>2020-08-30T16:03:08.000Z</published>
    <updated>2020-08-31T06:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己整了蛮久的网盘, 东西也存了挺多的了, 应该可以出来看看了</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/info.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/info.png" alt="info"></p><p align=center><font color=gray>(目前的状况呢)</font></p><p>也用上了一个好看的网盘目录了</p><h1 id="搭建">搭建</h1><p>目前我有俩个网盘目录, 里面文件啥的都是一致的, 只是用了不同的目录索引搭建的说</p><ul><li><a href="https://storage.isteed.cc"><code>storage.isteed.cc</code></a> -&gt; <a href="https://github.com/spencerwooo/onedrive-cf-index">spencerwooo/onedrive-cf-index</a></li><li><a href="https://pan.isteed.cc"><code>pan.isteed.cc</code></a> -&gt; <a href="https://github.com/ukuq/onepoint">ukuq/onepoint</a></li></ul><p>都是可以「白嫖」的说, 一个可以可以部署在 <a href="https://workers.cloudflare.com/">Cloudflare Workers</a> 上, 一个可以部署在 <a href="https://vercel.com/">Vercel</a> 上</p><p>为啥不用 <a href="https://github.com/heymind/OneDrive-Index-Cloudflare-Worker">heymind/OneDrive-Index-Cloudflare-Worker</a> 呢? 因为颜值是第一生产力 😆!(话说原来这个项目已经弃用了)</p><p>虽然有点麻烦, 但它是吼的, 值得的</p><p>对于我来说有个坑, 哪个 Key 指的不是「密钥」啥的, 而是指的「键」(key-value)😂️</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/site1.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/site1.png" alt="site1"></p><p align=center><font color=gray>(好好看)</font></p><hr><p>第二个嘛, 挺简单的, 把 <code>refresh_token</code> 填进去、配置生成一下就能用了, 不过可惜的是, <code>README.md</code> 渲染有些问题</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/site2.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/storage-of-onedrive/site2.png" alt="site2"></p><p align=center><font color=gray>(虽谈不上难看, 但就是没上面的那种精致感)</font></p><h1 id="关于网盘">关于网盘</h1><p>网盘嘛, 东西大致有以下的东西</p><ul><li>主要目录: 统一使用英文命名<ul><li><code>AndroidSoftware</code> -&gt; 个人自用一些软件与游戏</li><li><code>Backups</code> -&gt; 时不时复活的 Minecraft 服务器备份</li><li><code>Books</code> -&gt; 一些乱七八糟的书以及部分资料</li><li><code>Doc</code> -&gt; 文档以及其它资料</li><li><code>Images</code> -&gt; 前图床, 偶尔上传些图片</li><li><code>Manga</code> -&gt; 漫画, 基本是空的</li><li><code>Movies</code> -&gt; 自己看(攒着)的视频</li><li><code>Music</code> -&gt; 听的音乐音乐</li><li><code>OpenCore</code> -&gt; 编译的 OpenCore, 对我来说没啥用</li><li><code>Pictrues</code> -&gt; 壁纸等图片</li><li><code>Pixel2</code> -&gt; Pixel 2 的一些资源</li><li><code>Public</code> -&gt; 学校偷课件专用文件夹</li><li><code>WinSoftware</code> -&gt; Windows 的一些软件</li><li><code>MacSoftware</code> -&gt; macOS 的一些软件</li></ul></li></ul><hr><ul><li>主要的几个次要目录: 瞎鸡儿分类法~<ul><li><code>AndroidSoftware</code><ul><li>次级目录为软件名~</li></ul></li><li><code>MacSoftware</code><ul><li>同上 🤣</li></ul></li><li><code>Movies</code><ul><li><code>Anime</code> 动漫, 包括动漫的剧场版</li><li><code>Film</code> 电影, 包括动漫的剧场版</li><li><code>Others</code> 其它</li></ul></li><li><code>WindowsSoftware</code><ul><li><code>Appcgn_Backup</code> <strong>原</strong>软件缘部分资源的备份(具体详见 README)</li><li>其它次级目录为软件名</li></ul></li></ul></li></ul><h1 id="碎碎念">碎碎念</h1><p>好看就完事儿了<br>(希望不要翻)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己整了蛮久的网盘, 东西也存了挺多的了, 应该可以出来看看了&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="Cloudflare" scheme="https://blog.isteed.cc/tags/Cloudflare/"/>
    
    <category term="网盘" scheme="https://blog.isteed.cc/tags/%E7%BD%91%E7%9B%98/"/>
    
    <category term="分享" scheme="https://blog.isteed.cc/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>「Mac 的本领，突飞猛进。」 —— macOS 应用推荐第二期</title>
    <link href="https://blog.isteed.cc/post/macos-software/"/>
    <id>https://blog.isteed.cc/post/macos-software/</id>
    <published>2020-07-26T08:51:19.000Z</published>
    <updated>2020-07-27T06:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>macOS 系统功能一直都不弱，但还是有些小地方不合我意呢，哪就用软件将 macOS「武装」起来吧～</p><span id="more"></span><p>内容部分承接上篇「<a href="/posts/1520103949/">macOS 应用推荐</a>」</p><p>文中部分应用涉及到 GitHub，若下载速度不理想，可以尝试 <a href="https://gh.isteed.cc/">GitHub 加速</a> ｜ <a href="https://github.com/hunshcn/gh-proxy">原项目</a></p><p>下面就开始正题啦</p><h1 id="Keka-一款免费的-macOS-文件解压缩程序">Keka - 一款免费的 macOS 文件解压缩程序</h1><ul><li><a href="https://www.keka.io/zh-cn/">官网</a> ｜ 免费</li><li><a href="https://apps.apple.com/cn/app/keka/id470158793">AppStore</a> | 18¥</li><li><a href="https://formulae.brew.sh/cask/keka">Homebrew Cask</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/keka.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/keka.jpg" alt="keka"></p><p>大大小小的用了不少压缩软件，最后还是用回了这玩意，支持主流格式啥的当然不在话下呢</p><p>Dock 栏上的图标看惯了，也不觉得丑了呢 🤣</p><h1 id="Mathpix-Snipping-Tool-数学公式-OCR-识别工具">Mathpix Snipping Tool - 数学公式 OCR 识别工具</h1><ul><li><a href="https://mathpix.com/">官网</a></li><li><a href="https://mathpix.com/dmg/snip.dmg">下载直链</a></li></ul><p>Mathpix Snip 可以将截图将屏幕中的公式识别并转化为 LaTex 代码表达式，对写些论文、博客的人还是挺有用的说</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/mst.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/mst.png" alt="OCR 识别"></p><p>识别出来的公式也可以直接复制为 SVG 等其它格式</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/mst1.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/mst1.png" alt="Data"></p><p>（懒人必备～</p><h1 id="uPic-macOS-上的轻量图床工具">uPic - macOS 上的轻量图床工具</h1><ul><li><a href="https://blog.svend.cc/upic/">官网</a></li><li><a href="https://github.com/gee1k/uPic">GitHub</a></li><li><a href="https://formulae.brew.sh/cask/upic">Homebrew Cask</a></li></ul><p>相较于 PicGo 更为轻量简洁，对于我这破本子极其友好</p><p>在轻量的同时，功能也一个不落，支持在访达中选择文件上传（大爱！）、任意地方的拖拽上传、以及剪切板上传，可以很轻松的满足绝大部分人的需求</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/upic.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/upic.png" alt="upic"></p><p>支持输出 Markdown、HTML、URL、UBB 格式</p><p>这里是它所支持的图床 <img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/upic1.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/upic1.png" alt="upic1"></p><p>GitHub 图床可以直接开启 jsdelivr 加速哦 😋</p><h1 id="TotalFinder-macOS-访达扩展">TotalFinder - macOS 访达扩展</h1><ul><li><a href="https://totalfinder.binaryage.com">官网</a> ｜ 12$，一次性</li></ul><p>TotalFinder 给 Finder 带来了一系列可以提升日常使用体验&amp;效率的小功能</p><p>例如 <kbd>command</kbd> + <kbd>X</kbd> 剪切文件，批量重命名，多标签，实时操作进度条，双窗口模式等功能</p><p>还优化了在 Finder 中的长文件名显示（需要手动开启），极大的提升了日常使用体验 😆</p><h1 id="PopClip-电脑上的气泡工具栏">PopClip - 电脑上的气泡工具栏</h1><ul><li><a href="https://pilotmoon.com/popclip/">官网</a> | 12.99$，一次性</li><li><a href="https://apps.apple.com/cn/app/popclip/id445189367?mt=12">AppStore</a> ｜ 88¥，一次性</li></ul><p>在用鼠标选中文字后悬停，就能像在 Android/iOS 长按文字那样弹出一个气泡，上面有打开链接、剪切、复制、粘贴等操作供你选择</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/popclip.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/popclip.png" alt="popclip"></p><p>依托于专门的<a href="https://pilotmoon.com/popclip/extensions/">插件库</a>，可以极大的扩展其功能</p><h1 id="Charles-跨平台的抓包工具">Charles - 跨平台的抓包工具</h1><ul><li><a href="https://www.charlesproxy.com/">官网</a></li><li><a href="https://formulae.brew.sh/cask/charles">Homebrew Cask</a></li></ul><p>抓包工具可以干啥？懂得都懂吧 🤣</p><p>之前我拿来干啥呢？拿来抓<a href="/posts/fuck-dingtalk-live/">钉钉网课</a>咯</p><h1 id="Hungrymark-便捷的书签收集应用">Hungrymark - 便捷的书签收集应用</h1><ul><li><a href="https://zhengying.github.io/hungrymark/">官网</a></li><li><a href="https://apps.apple.com/cn/app/hungrymark/id1482778901">AppStore</a> ｜ 6¥，一次性</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/hungrymark.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/hungrymark.png" alt="hungrymark"></p><p>这是一个以 Markdown 作为配置文件的收藏库，他可以将你收藏的网页、文件、图片、文本等通过状态栏图标访问</p><p>你甚至还可以直接在这里面快捷运行脚本的说</p><p>（真正的懒狗连收藏夹都懒得整理的说（确信</p><h1 id="Rectangle-一个开源的窗口管理利器">Rectangle - 一个开源的窗口管理利器</h1><ul><li><a href="https://rectangleapp.com/">官网</a></li><li><a href="https://github.com/rxhanson/Rectangle">GitHub</a></li><li><a href="https://formulae.brew.sh/cask/rectangle">Homebrew Cask</a></li></ul><p>还在羡慕 Windows 上的拖动窗口碰触四周调整窗口大小么？不用担心，这款软件可以在 macOS 上将窗口管理功能扩展到下一个境界</p><p>当你拖动窗口碰触四周时，会有一个半透明遮罩提示你窗口将要调整到的大小</p><p>什么？拖动完了想挑回去？用鼠标将窗口拖出窗口区域即可恢复呢（与 Windows 一样呢）</p><p>什么？拖动窗口太麻烦，不喜欢用鼠标？那就用键盘快捷键吧 😆（下面是默认快捷键列表）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/rectangle.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/rectangle.png" alt="Rectangle"></p><h1 id="Glance-多合一的免费-QuickLook-扩展">Glance - 多合一的免费 QuickLook 扩展</h1><ul><li><a href="https://github.com/samuelmeuli/glance">GitHub</a></li><li><a href="https://apps.apple.com/cn/app/glance-quick-look-plugin/id1513574319?mt=12">AppStore</a> ｜ 免费</li><li><a href="https://formulae.brew.sh/cask/glance">Homebrew Cask</a></li></ul><p>用 macOS 时，常常就是选中文件空格，这样就能极其方便的预览哪些并不想打开的文件了，但是有些文件格式访达原生不支持预览，这时候这种插件的重要性就体现出来咯</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/glance.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/glance.png" alt="glance"></p><p>支持高亮显示源代码文件，也支持 Markdown、Jupyter Notebook<br>、分隔符、压缩包等文件</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/glance2.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/glance2.png" alt="glance support files"></p><h1 id="iPreview-另一款付费-QuickLook-扩展">iPreview - 另一款付费 QuickLook 扩展</h1><ul><li><a href="https://findergg.github.io/">官网</a></li><li><a href="https://apps.apple.com/cn/app/id1519213509">AppStore</a> ｜ 6¥、一次性</li></ul><p>同样是一款 QuickLook 扩展</p><p>支持显示更多种类的源代码文件，同样支持 Markdown 文件的预览</p><p>比上面的多了 3D 模型、Webp、Avif 等文件的预览，少支持了压缩文件预览</p><p>（为啥不用免费的 <a href="http://www.quicklookplugins.com">QuickLook Plugins</a>？年代久远，某些插件新系统兼容不太行</p><h1 id="Hex-Fiend-优雅的开源十六进制编辑器">Hex Fiend - 优雅的开源十六进制编辑器</h1><ul><li><a href="https://ridiculousfish.com/hexfiend/">官网</a></li><li><a href="https://github.com/ridiculousfish/HexFiend">GitHub</a></li><li><a href="https://github.com/ridiculousfish/HexFiend/releases">GitHub Release</a></li><li><a href="https://formulae.brew.sh/cask/hex-fiend">Homebrew Cask</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/hexfiend.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/hexfiend.png" alt="hexfiend"></p><p>偶尔可能会用到的十六进制编辑器（😋</p><h1 id="ImageOptim-图片优化工具">ImageOptim - 图片优化工具</h1><ul><li><a href="https://imageoptim.com/mac">官网</a></li><li><a href="https://github.com/ImageOptim/ImageOptim">GitHub</a></li><li><a href="https://formulae.brew.sh/cask/imageoptim">Homebrew Cask</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/imageoptim.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/imageoptim.png" alt="imageoptim"></p><p>一款可以抹去 EXIF 信息、顺带压缩下图片的小应用～</p><h1 id="GitUp-简单、快速的-Git-客户端">GitUp - 简单、快速的 Git 客户端</h1><ul><li><a href="https://gitup.co/">官网</a></li><li><a href="https://github.com/git-up/GitUp">GitHub</a></li><li><a href="https://formulae.brew.sh/cask/gitup">Homebrew Cask</a></li></ul><p>界面简洁，遵循分支理念，更新及时，得益于直接与 git 本地数据库交互的方式，使 GitUp 比直接使用 git 命令都快呢</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/gitup.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/gitup.png" alt="gitup"></p><h1 id="Visual-Studio-Code-微软出品的跨平台代码编辑器">Visual Studio Code - 微软出品的跨平台代码编辑器</h1><ul><li><a href="https://code.visualstudio.com">官网</a></li><li><a href="https://github.com/Microsoft/vscode">GitHub</a></li><li><a href="https://formulae.brew.sh/cask/visual-studio-code">Homebrew Cask</a></li></ul><p>是一个非常好的 Markdown 编辑器（（<s>雾</s></p><h1 id="Fluent-Reader-Fluent-设计的多平台-RSS-阅读器">Fluent Reader - Fluent 设计的多平台 RSS 阅读器</h1><ul><li><a href="https://hyliu.me/fluent-reader/">官网</a></li><li><a href="https://github.com/yang991178/fluent-reader">GitHub</a></li><li><a href="https://apps.apple.com/cn/app/id1520907427">AppStore</a></li><li><a href="https://github.com/yang991178/fluent-reader/releases">GitHub Release</a></li></ul><p>一款以 <a href="https://www.microsoft.com/design/fluent/">Fluent Design</a> 设计的 RSS 阅读器</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/reader.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/reader.png" alt="fluent-reader"></p><p>（我本子不能很流畅的带动这个东西，看起来性能要求挺高的，呜呜呜</p><h1 id="Reeder-老牌-RSS-阅读器">Reeder - 老牌 RSS 阅读器</h1><ul><li><a href="https://reederapp.com/">官网</a></li><li><a href="https://apps.apple.com/cn/app/reeder-4/id1449412482">AppStore</a> | 68¥、一次性</li></ul><p>iOS/macOS 上的老牌 RSS 阅读器，支持各类 RSS 订阅服务</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/reeder3.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/reeder3.png" alt="reeder"></p><p>（图为老版 Reeder 3，目前最新为 Reeder 4<br>（比上面哪个流畅多了呢</p><h1 id="iStat-Menus-菜单栏上的系统监测">iStat Menus - 菜单栏上的系统监测</h1><ul><li><a href="https://bjango.com/mac/istatmenus/">官网</a></li><li><a href="https://download.bjango.com/istatmenus/">下载</a> ｜ 个人 $12.83、一次性</li><li><a href="https://formulae.brew.sh/cask/istat-menus">Homebrew Cask</a></li></ul><p>支持以折线图方式查看各种监测的历史数据</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/istat_menus.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/istat_menus.png" alt="istat_menus"></p><h1 id="CheatSheet-应用快捷键提醒工具">CheatSheet - 应用快捷键提醒工具</h1><ul><li><a href="https://www.mediaatelier.com/CheatSheet/">官网</a></li><li><a href="https://formulae.brew.sh/cask/cheatsheet">Homebrew Cask</a></li></ul><p>用应用是一定会有忘记一些不常用的快捷键的情况，这个应用可以在你忘记时好好的提醒你（按住 command 键即可呼出应用）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/cheatsheet.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/cheatsheet.png" alt="cheatsheet"></p><p>（为了防止你忘记，你甚至可以打印出快捷键表看</p><h1 id="Amphetamine-强大的保持唤醒工具">Amphetamine - 强大的保持唤醒工具</h1><ul><li><a href="https://itunes.apple.com/cn/app/amphetamine/id937984704">AppStore</a> ｜ 免费</li></ul><p>一款支持自定义触发器、唤醒硬盘的防止系统「清醒」的应用</p><p>具有丰富的自定义选项（😋</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/amphetamine.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/macos-software/amphetamine.png" alt="Amphetamine"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;macOS 系统功能一直都不弱，但还是有些小地方不合我意呢，哪就用软件将 macOS「武装」起来吧～&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="macOS" scheme="https://blog.isteed.cc/tags/macOS/"/>
    
    <category term="应用推荐" scheme="https://blog.isteed.cc/tags/%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>以 Google Analytics 实现的 PV 浏览量统计</title>
    <link href="https://blog.isteed.cc/post/google-analytics-hit-count/"/>
    <id>https://blog.isteed.cc/post/google-analytics-hit-count/</id>
    <published>2020-06-26T17:06:57.000Z</published>
    <updated>2020-07-16T08:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览量统计有挺多种的，不乏像不蒜子、LeanCloud 等统计方式，但始终不能如意。</p><p>例如不蒜子无法导入/修改数据，浏览量是通过 href 来统计的，对「镜像站」的不友好，以及 Safari 上的抽风…</p><p>又像 LeanCloud 的哪麻烦的设置与「缓慢」的 API…</p><span id="more"></span><p>最终都让我放弃，偶然在 <a href="https://printempw.github.io/google-analytics-api-page-views-counter/">PRIN BLOG</a> 发现可以利用 Google Analytics 的数据来进行浏览量，但需要部署在 VPS 上，见作者说部署到 Serverless 平台失败，就以为无法白嫖，直到 <a href="https://spencerwoo.com/">Spencer</a> 的<a href="https://blog.spencerwoo.com/2020/06/serverless-ga-hit-count-api/">这篇博文</a>出来。二话不说，开搞 😋！</p><hr><p>详细教程可以看<a href="https://blog.spencerwoo.com/2020/06/serverless-ga-hit-count-api/">这篇博文</a>，这里就简单复述一下呢</p><h1 id="开启-Google-Analytics-API">开启 Google Analytics API</h1><p>可以按照 <a href="https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/service-py#1_enable_the_api">Google 官方教程</a> 走，也可以直接按下面的步骤来。</p><hr><p><a href="https://console.developers.google.com/start/api?id=analyticsreporting.googleapis.com&amp;credential=client_key">setup tools</a> 并根据提示进行设置，选择一个项目（或创建新的项目，比如 ga-hit-count），之后一路继续，就可以为我们这一项目开启 Google API 咯～</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t01p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t01p.png" alt="Credentials"></p><p>然后页面就会跳转到 Google API 的凭据设置页面，API 选择 <code>Analytics Reporting API</code>，调用方法选择 <code>网页服务器</code>，最后选择 <code>不会使用 App Engine 或 Compute Engine</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t02p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t02p.png" alt="GetCredentials"></p><p>最后根据提示设置基本信息，例如设置服务账号名称（随意设置），选定「角色」为 <code>Service Account User</code>，按继续后就将会有一个 json 文件下载下来</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t03p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/google-analytics-hit-count/t03p.png" alt="GoogleAPIs"></p><p>json 文件长这样，需要的几个信息都在这儿了</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;project_id&quot;</span>: <span class="string">&quot;gmeta-domain&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private_key&quot;</span>: <span class="string">&quot;-----BEGIN PRIVATE KEY-----\nxxx-----END PRIVATE KEY-----\n&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;client_email&quot;</span>: <span class="string">&quot;blog-analytics@meta-domain.gserviceaccount.com&quot;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让 API 访问到 Google Analytics 的数据，需要打开 Google Analytics 后台将 client_email 定义的邮箱作为新用户加入，这里有<a href="https://support.google.com/analytics/answer/1009702">官方教程</a></p><p>记住，一定要保管好它们，不然丢了谁都不认你 🤪</p><h1 id="部署到-Vercel">部署到 Vercel</h1><p>这里是用 Vercel 来部署 Serverless API 项目，贴个大佬项目的原地址 <a href="https://github.com/spencerwooo/ga-hit-count-serverless">spencerwooo/ga-hit-count-serverless</a>，大家 Fork 下来修改下 <code>api/config.ts</code> 里的配置就可以用了</p><h2 id="修改-config-ts-的配置">修改 config.ts 的配置</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Google Analytics query configurations</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ! If you are deploying this with your own account</span></span><br><span class="line"><span class="comment"> * ! , then you will need to change this config file.</span></span><br><span class="line"><span class="comment"> * ! Don&#x27;t put your privateKey inside this file directly!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">viewId</span>: <span class="string">&quot;Google Analytics 视图 ID&quot;</span>,</span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&quot;Project ID&quot;</span>,</span><br><span class="line">    <span class="attr">privateKey</span>: process.env.PRIVATE_KEY,</span><br><span class="line">    <span class="attr">clientEmail</span>: <span class="string">&quot;blog-analytics@meta-domain.gserviceaccount.com&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">allFilter</span>: [<span class="string">&quot;/&quot;</span>],</span><br><span class="line">  <span class="attr">startDate</span>: <span class="string">&quot;2010-01-01&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是配置文件的样子</p><hr><p>这里就直接引用<a href="https://blog.spencerwoo.com/2020/06/serverless-ga-hit-count-api/">原文</a>～（虽然本来就是与原文差不多的说</p><blockquote><p>其中，这些内容我们都需要一一进行设置：</p><ul><li><code>viewId</code>：是你的 Google Analytics 视图 ID，可以在 Google Analytics 后台的 Admin » View » View Settings 中找到；<br><img src="https://i.loli.net/2020/06/25/VIWUvCqSyX23jed.png" class="lazy" data-srcset="https://i.loli.net/2020/06/25/VIWUvCqSyX23jed.png" alt="Google Analytics 视图 ID 的设定位置"></li><li><code>projectId</code>：是刚刚凭证 JSON 文件中的 <code>project_id</code>，直接按照刚刚的凭证填写即可；</li><li><code>privateKey</code>：是通过 Vercel 环境变量获取到的 API 凭证私钥，<strong>这里不要更改</strong>；</li><li><code>clientEmail</code>：是刚刚凭证 JSON 文件中的 <code>client_email</code>，直接按照刚刚的凭证填写即可；</li><li><code>allFilter</code>：是通过 Google API 查询时的前缀过滤器，比如你的网站中文章路径以 <code>/post</code> 开头，那么就可以设置为 <code>['/post']</code>。默认为 <code>['/20']</code>（因为我的文章路径是以 <code>/2020</code> 或 <code>/2019</code> 开头的）；</li><li><code>startDate</code>：是通过 Google API 查询时设定时间段的开始时间，设定一个比较久远的时间即可，默认为 <code>2010-01-01</code>。</li></ul></blockquote><div class="toast toast-warning">🚨 请注意！<br>这里千万千万不要直接将刚刚凭证中获取到的私钥直接粘贴进入 privateKey 一项之中，因为这样当我们将 config.ts 签入 git 之后，privateKey 将以明文形式保存，非常危险。</div><h2 id="导入-Vercel">导入 Vercel</h2><p><a href="https://vercel.com/">Vercel</a>（这家伙又又又换名字了），用 GitHub 注册后，直接将刚刚 Fork 并修改好配置文件的项目导入即可，啥都不用管就是 <code>Continue</code></p><p>导入完成后还需要设置 <code>privateKey</code>，在项目的 <code>Project Settings</code> - <code>General</code> - <code>Environment Variables</code> - <code>Production</code> 中添加一个</p><ul><li><code>NAME</code> 为 <code>PRIVATE_KEY</code></li><li><code>VALUE</code> 为 <code>private_key</code><ul><li>这个 <code>private_key</code> 是上面的哪个 json 里的对应值，需要注意的是要把 <code>\n</code> 全部删除，换成换行（<kbd>command</kbd> + <kbd>D</kbd> 大胜利！）</li></ul></li></ul><p>的变量</p><p>最后需要重新触发一次部署，随便 commit 点东西更新一下就行啦</p><h2 id="调用-API">调用 API</h2><p>Vercel 应该会给你分配一个类似于 <code>https://xxxx.vercel.app</code> 的域名，在根域名后面添加 <code>/api/ga</code> 访问，看看是否会将 Google Analytics 里面全部路径与访问量拉取并以 JSON response 给出</p><p>这个请求方法是后面带个 <code>?page=&#123;WEBSITE_PAGE_PATH&#125;</code>，其中 <code>&#123;WEBSITE_PAGE_PATH&#125;</code> 是你博文的相对路径，这样就会返回给定路径的浏览量啦 😆</p><p>例如现在的这篇博文，相对路径是 <code>/posts/google-analytics-hit-count/</code>，那么请求的将是</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xxxx.vercel.app<span class="regexp">/api/g</span>a?page=<span class="regexp">/posts/g</span>oogle-analytics-hit-count/</span><br></pre></td></tr></table></figure><p>⚠️ 注意：我设置了自定义域名，访问的将是<a href="https://api.isteed.cc/api/ga?page=/posts/google-analytics-hit-count/">这样</a>的（你可以点进去看看）</p><p>它就会返回数据给你，现在我这篇博文的浏览量是 <code>0</code>，返回的数据是下面这样的</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;page&quot;</span>:<span class="string">&quot;/posts/google-analytics-hit-count/&quot;</span>,<span class="attr">&quot;hit&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;]</span><br></pre></td></tr></table></figure><hr><p>原文有的就到这儿了，有了 API 那该怎么用呢？下面便是一个简单的使用方法</p><h1 id="集成到-Hexo-主题">集成到 Hexo 主题</h1><p>这下，API 有了，请求格式也有了，那么就可以将它集成在自己的主题里啦 😆</p><p>下面将以我现在使用的 Hexo 主题 <a href="https://github.com/Lufsx/hexo-theme-suka">hexo-theme-suka</a> 为例</p><p>这个简单的 js 就开源到 GitHub 上了，这里是地址 <a href="https://github.com/Lufsx/ga-hit-count">Lufsx/ga-hit-count</a>，之后会写点 README，最近在考试，没啥时间呢（<s>没啥时间搞这些？</s>）</p><p>现在的这个 js 有一些问题，但还用还是能用哒 🤣（有时间再完善呢</p><h2 id="创建-EJS">创建 EJS</h2><p>首先根据原主题的规范，在 <code>/layout/_plugin/</code> 新建了个文件夹，用于存放所需要用到的 EJS 文件</p><p>接下来就是新建文件啦 🤪</p><p>先给它新建个 <code>import_js.ejs</code> 用来在头部引入 <code>js</code> 文件，传递一个已经搭建好的 API 地址的参数</p><p>下面是代码呢（菜鸡一个，如果有更好的写法，欢迎提出呀 🤣）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.post_views_api = <span class="string">&quot;&lt;%= theme.ga_hit_count.post_views_api %&gt;&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.vendors.ga_hit_count) &#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= theme.vendors.ga_hit_count %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ga-views.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>前面四行是定义了一个变量 <code>window.post_views_api</code>，值为主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ga_hit_count:</span></span><br><span class="line">  <span class="attr">post_views_api:</span> <span class="comment"># 是这里的值呀</span></span><br></pre></td></tr></table></figure><p>它传递了你 API 所在的地址</p><p>后面的五行则是引入了 js 文件，顺便判断了下有无自定义 js 地址，没有就返回内置的，这个自定义地址在主题配置文件中长这样</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">ga_hit_count:</span> <span class="comment"># 这里就是自定义的地址呢</span></span><br></pre></td></tr></table></figure><hr><p>接着在同目录下创建个 <code>post-counter.ejs</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- GA Hit Count Post Views --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;post-meta-views&quot;</span> <span class="attr">hidden</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;suka-devide-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&lt;%- theme.ga_hit_count.before %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pv-counter&quot;</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&lt;%- theme.ga_hit_count.after %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里是直接复制主题带的另外一个浏览量统计的（懒</p><p>定义了一个 id 为 <code>post-meta-views</code> 的 <code>&lt;span&gt;</code> 包裹着 <code>pv-counter</code> 的 <code>&lt;span&gt;</code></p><h2 id="引入-EJS">引入 EJS</h2><p>全局引入的 EJS 文件是这个 <code>/layout/_partial/source/footer.ejs</code></p><p>简单添加几句直接带走</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+    /* GA Hit Count */</span></span><br><span class="line"><span class="addition">+    if (theme.ga_hit_count.enable) html += partial(&#x27;_plugin/hit-count/import_js&#x27;);</span></span><br></pre></td></tr></table></figure><p>这里判断主题文件中的 <code>enable</code> 值是否为 <code>true</code>，是则引入 <code>_plugin/hit-count/import_js</code></p><hr><p>我主题在博文页面引入统计所用的 EJS 文件是这个 <code>/layout/_partial/post/header-info.ejs</code></p><p>简单添加几句再次带走 😆</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+        &lt;% if ( (theme.ga_hit_count.enable) ) &#123; %&gt;</span></span><br><span class="line"><span class="addition">+            &lt;%- partial(&#x27;_plugin/hit-count/post-counter&#x27;, &#123;&#125;, &#123;cache: theme.fragment_cache&#125;) %&gt;</span></span><br><span class="line"><span class="addition">+        &lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>这里判断主题文件中的 <code>enable</code> 值是否为 <code>true</code>，是则引入 <code>_plugin/hit-count/post-counter</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ga_hit_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是看这里是不是 true 呢</span></span><br></pre></td></tr></table></figure><h2 id="核心-js">核心 js</h2><p>引入都搞好啦，那么最核心的地方就是编写 js 了（虽然没啥技术含量，还实现的不太完美）</p><p>js 文件开源在 GitHub 上，这里是地址 <a href="https://github.com/Lufsx/ga-hit-count">Lufsx/ga-hit-count</a></p><p>相关作用与解释直接打注释上了（懒～</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 找到 id 为 pv-counter 的</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pv-counter&quot;</span>);</span><br><span class="line">  <span class="comment">// 同上</span></span><br><span class="line">  <span class="keyword">var</span> show = <span class="built_in">document</span>.getElementById(<span class="string">&quot;post-meta-views&quot;</span>);</span><br><span class="line">  <span class="comment">// 获取 URL</span></span><br><span class="line">  <span class="keyword">var</span> url = <span class="built_in">document</span>.location.toString();</span><br><span class="line">  <span class="keyword">var</span> arrUrl = url.split(<span class="string">&quot;//&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> start = arrUrl[<span class="number">1</span>].indexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="comment">// 截取 URL 中, 从第一个 / 开始的地址</span></span><br><span class="line">  <span class="keyword">var</span> relUrl = arrUrl[<span class="number">1</span>].substring(start);</span><br><span class="line">  <span class="comment">// 如果相对地址中带有参数, 那么截掉</span></span><br><span class="line">  <span class="comment">//例如微信打开的东西后面都会带一串炒鸡长的参数</span></span><br><span class="line">  <span class="keyword">if</span> (relUrl.indexOf(<span class="string">&quot;?&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">    relUrl = relUrl.split(<span class="string">&quot;?&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从 API 获取数据</span></span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;<span class="built_in">window</span>.post_views_api&#125;</span>?page=<span class="subst">$&#123;relUrl&#125;</span>`</span></span><br><span class="line">  ).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json());</span><br><span class="line">  <span class="comment">// 赋值 hit 为浏览量</span></span><br><span class="line">  <span class="keyword">const</span> hit = json[<span class="number">0</span>].hit;</span><br><span class="line">  <span class="comment">// 如果 hit 不是未定义, 存在 id 为 post-meta-views</span></span><br><span class="line">  <span class="keyword">if</span> (hit !== <span class="literal">undefined</span> &amp;&amp; show !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 那么将 id 为 pv-counter 的内容替换为浏览量</span></span><br><span class="line">    obj.innerHTML = <span class="string">`<span class="subst">$&#123;hit&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 并将它可见</span></span><br><span class="line">    show.hidden = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>js 的效果大概就是获取浏览量，获取完成后写入，再将元素设置为可见</p><h2 id="成果">成果</h2><p>最后，主题配置文件是这样子的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ga_hit_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_api:</span> <span class="string">https://api.isteed.cc/api/ga</span> <span class="comment"># Example: https://domain.com/api/ga</span></span><br><span class="line">  <span class="attr">before:</span> <span class="comment"># html tag support</span></span><br><span class="line">  <span class="attr">after:</span> <span class="string">Views</span> <span class="comment"># html tag support</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">ga_hit_count:</span> <span class="comment"># 这里就是自定义的地址呢</span></span><br></pre></td></tr></table></figure><hr><p>最终效果就如你现在浏览的这一篇博文一样呢</p><h1 id="碎碎念">碎碎念</h1><p>终于又重上了浏览量统计啦</p><p>这个东西的好处就是直接使用 Google Analytics 数据，一个 Google Analytics 统计代码通吃</p><p>但数据更新不太及时呢，而且原 Google Analytics 又特别阻碍页面的加载，不过还好，可以使用 <a href="https://github.com/SukkaW/cloudflare-workers-async-google-analytics">SukkaW/cloudflare-workers-async-google-analytics</a>、<a href="https://github.com/giuem/ga-proxy">giuem/ga-proxy</a> 等解决方案</p><hr><p>什么？你问我 macOS 应用推荐第二期去哪儿了？当然是咕了 🤪</p><p>不过已经在写了（指新建文件</p><h1 id="参考链接-关联阅读">参考链接/关联阅读</h1><p><a href="https://printempw.github.io/google-analytics-api-page-views-counter/">PRIN BLOG</a><br><a href="https://blog.spencerwoo.com/2020/06/serverless-ga-hit-count-api/">Spencer’s Blog</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;浏览量统计有挺多种的，不乏像不蒜子、LeanCloud 等统计方式，但始终不能如意。&lt;/p&gt;
&lt;p&gt;例如不蒜子无法导入/修改数据，浏览量是通过 href 来统计的，对「镜像站」的不友好，以及 Safari 上的抽风…&lt;/p&gt;
&lt;p&gt;又像 LeanCloud 的哪麻烦的设置与「缓慢」的 API…&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Google Analytics" scheme="https://blog.isteed.cc/tags/Google-Analytics/"/>
    
    <category term="Blog" scheme="https://blog.isteed.cc/tags/Blog/"/>
    
    <category term="Page View" scheme="https://blog.isteed.cc/tags/Page-View/"/>
    
    <category term="Vercel" scheme="https://blog.isteed.cc/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>优秀、轻快、安全的即时通讯 —— Telegram 入坑指南</title>
    <link href="https://blog.isteed.cc/post/how-to-go-tg/"/>
    <id>https://blog.isteed.cc/post/how-to-go-tg/</id>
    <published>2020-06-12T19:15:10.000Z</published>
    <updated>2021-05-23T09:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>世界上有一个软件，它能做到能在所有设备都有优秀的统一使用体验，兼容个大桌面平台（macOS/Windows/Linux）以及移动平台（iOS/Android/<s>Windows Phone</s>）甚至还在 <a href="https://web.telegram.org/">Web</a> 都有几乎完整的体验。</p><p>为了让更多的人知道这难道不易的优秀 IM (聊天) 体验，便写了此篇入坑指南</p><span id="more"></span><hr><p>目录：</p><!-- no toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E7%AE%80%E4%BB%8B-%E5%AF%B9%E6%AF%94">简介/对比</a></li><li><a href="#%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97">入坑指南</a><ul><li><a href="#%E4%B8%8B%E8%BD%BD-%E5%AE%89%E8%A3%85">下载&amp;安装</a><ul><li><a href="#Android">Android</a></li><li><a href="#iOS">iOS</a></li><li><a href="#Desktop">Desktop</a></li></ul></li><li><a href="#%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C">账号注册</a><ul><li><a href="#Nekogram-X">Nekogram X</a></li><li><a href="#%E5%AE%98%E6%96%B9%E5%AE%A2%E6%88%B7%E7%AB%AF">官方客户端</a></li></ul></li><li><a href="#%E5%B0%8F%E6%8A%80%E5%B7%A7">小技巧</a></li><li><a href="#%E9%A2%91%E9%81%93%E6%8E%A8%E8%8D%90">频道推荐</a><ul><li><a href="#%E5%90%84%E7%A7%8D%E8%B5%84%E8%AE%AF">各种资讯</a></li><li><a href="#%E8%B5%84%E6%BA%90%E9%A2%91%E9%81%93">资源频道</a></li><li><a href="#%E6%B2%99%E9%9B%95%E5%9B%BE%E4%B8%8E%E8%A7%86%E9%A2%91">沙雕图与视频</a></li><li><a href="#NSFW">NSFW</a></li></ul></li><li><a href="#%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8E%A8%E8%8D%90">机器人推荐</a></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E9%93%BE%E6%8E%A5">一些链接</a><ul><li><a href="#%E6%A1%8C%E9%9D%A2%E7%89%88">桌面版</a></li><li><a href="#%E5%85%AC%E5%85%B1%E4%BB%A3%E7%90%86">公共代理</a></li><li><a href="#%E6%B1%89%E5%8C%96%E8%AF%AD%E8%A8%80%E5%8C%85">汉化语言包</a></li></ul></li></ul><hr><h1 id="前言">前言</h1><p>本篇入坑指南可能较长较详细，请耐心的看下去。</p><p>当你玩懂了后，你会发现这里不仅可以聊天，还能听音乐、看番、看电影、看资讯、下载软件，你甚至还能拿它做网盘！</p><h1 id="简介-对比">简介/对比</h1><p>用这个嘛，肯定是相较于其它 IM 软件有极大的优势，下面放一个由<a href="https://t.me/akafeng_broadcast/14">这个频道</a>所整理的 QQ、微信、Telegram 的特性对比图</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/tqc.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/tqc.jpeg" alt="Telegram 于 QQ 微信的对比"></p><p>图为 2018.08.24 更新，现在已经是 0202 年了，有些东西已经发生了变化。。。</p><p>这里稍做增添/更正，还有些我就不考究了</p><p>更新日期: 2020-11-21</p><table><thead><tr><th style="text-align:center">-</th><th style="text-align:left">QQ</th><th style="text-align:left">微信</th><th style="text-align:left">Telegram</th></tr></thead><tbody><tr><td style="text-align:center">创建群组</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">最多可包含 200,000 人</td></tr><tr><td style="text-align:center">消息撤回</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">私聊可为对方删除消息</td></tr><tr><td style="text-align:center">安装包大小（Android）</td><td style="text-align:left">98.6 MB</td><td style="text-align:left">159.7 MB</td><td style="text-align:left">38.6 MB</td></tr><tr><td style="text-align:center">多终端支持</td><td style="text-align:left">最多可允许三端同时登录<br>Phone/Pad/PC</td><td style="text-align:left">最多可允许两端同时登陆<br>（网页版登陆时会将 PC 端退出登陆）<br>Phone/PC</td><td style="text-align:left">不限制多终端登陆<br>支持同平台同时登陆，可单独管理已登陆的设备<br>Phone/Pad/PC/Web</td></tr><tr><td style="text-align:center">存储空间统计/清理</td><td style="text-align:left">可看见缓存及其下载文件占用(TIM)<br>支持单独清理已下载的文件<br>支持清空消息列表<br>支持清空所有聊天记录</td><td style="text-align:left">可以统计已用空间，但完全不准<br>可以精准到对话的清理空间<br>只支持手动选择操作，且删除后无法恢复</td><td style="text-align:left">可以统计<strong>所有</strong>存储使用情况<br>可手动清理各类型图片<br>支持设置媒体文件保留时间<br>支持精准到对话的清理以及类型选择（Telegram X）</td></tr><tr><td style="text-align:center">消息推送</td><td style="text-align:left">Android 端为应用推送<br>iOS 端支持完整 APNS</td><td style="text-align:left">Android 端支持残废 FCM<br>iOS 端支持完整 APNS</td><td style="text-align:left">Android 端支持完整 FCM<br>iOS 端支持完整 APNS</td></tr></tbody></table><hr><p>在我手机(Pixel 2)上，微信完全关闭后从打开到完全进入需要 5s 左右，TIM 则为 1s 左右，Telegram 不到 1s。</p><p>微信不仅魔改系统原生行为，还极其笨重、拖沓、垃圾、高占用，要不是有些时候不得不用﹍哎﹍</p><h1 id="入坑指南">入坑指南</h1><p>如何入坑 Telegram <img alt="Telegram" width="16" src=https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/telegram.png> 呢？</p><h2 id="下载-安装">下载&amp;安装</h2><h3 id="Android">Android</h3><p>Android 端可以使用 <a href="https://github.com/NekoX-dev/NekoX">Nekogram X</a>（一个第三方的<strong>开源</strong>客户端）</p><p>如何下载使用呢？下载的就是下面那个东西～</p><a href="https://gh.isteed.cc/https://github.com/NekoX-Dev/NekoX/releases/download/v7.7.2-2/NekoX-full-arm64-v8a-release.apk"><p align=center><img alt="NekoX" width="192" src=https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nekox.png></p></a><p>首先先点击上面的图标或是<a href="https://gh.isteed.cc/https://github.com/NekoX-Dev/NekoX/releases/download/v7.7.2-2/NekoX-full-arm64-v8a-release.apk">这个下载链接</a>下载 APK 安装文件</p><p>下载完成后打开安装即可~</p><h3 id="iOS">iOS</h3><p>iOS 端在 AppStore 内搜索 <code>Telegram</code> 即可下载</p><div class="toast toast-warning">⚠️ 注意：官方原版是这个，使用<b>非开源</b>、不安全的第三方客户端有可能会导致手机号码、信息等隐私信息泄漏！</div><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/inappstore.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/inappstore.jpg" alt="AppStore"></p><h3 id="Desktop">Desktop</h3><p>什么？你想在电脑上用？可以，但是设置较为繁琐复杂，这里就等你用到一定程度后自己摸索了，安装文件可以去<a href="http://t.me/">官网</a>获取（⚠️ 注意，需要自行翻过长城）</p><p>这里提供一个国内可以直接下载的地址</p><ul><li><a href="https://proxy.lufs.workers.dev/?url=https%3A%2F%2Fosx.telegram.org%2Fupdates%2FTelegram.dmg">macOS(OS X)</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/win">Windows</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/linux">Linux64</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/linux32">Linux32</a></li></ul><p>部分浏览器上可能无法正常显示下载文件名，需要手动更改后缀</p><ul><li>macOS 的后缀是 <code>.dmg</code></li><li>Windows 的后缀是 <code>.exe</code></li><li>Linux 的后缀是 <code>.tar.xz</code></li></ul><h2 id="账号注册">账号注册</h2><p>由于防火墙的阻扰，需要使用一些特殊手段才能成功注册</p><p>接下来，为了能够顺利的进行注册，请先按以下步骤<strong>设置代理</strong></p><p>Android 可以使用 <a href="#nekogram-x">Nekogram X</a> 按<a href="#nekogram-x">此步骤</a>注册即可（<a href="#nekogram-x">点击跳转</a>）</p><p>iOS 使用<a href="#%E5%AE%98%E6%96%B9%E5%AE%A2%E6%88%B7%E7%AB%AF">官方客户端</a>按<a href="#%E5%AE%98%E6%96%B9%E5%AE%A2%E6%88%B7%E7%AB%AF">此步骤</a>注册即可（<a href="#%E5%AE%98%E6%96%B9%E5%AE%A2%E6%88%B7%E7%AB%AF">点击跳转</a>）</p><p>桌面平台？有点难整，等待你自己探索哦！</p><h3 id="Nekogram-X">Nekogram X</h3><p>Nekogram X 内置公共代理，注册时可以直接使用公共代理列表中的代理。</p><p>打开后，标题栏可能一直显示 <code>连接中...</code>，这里的话直接点图中的哪个「小盾牌」就好了</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx01p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx01p.png" alt="NekoX_1p"></p><p>在代理设置中点击三条杠杠的哪个图标</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx02p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx02p.png" alt="NekoX_2p"></p><p>先点一下更新，更新完成后确定即可</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx03p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx03p.png" alt="NekoX_3p"></p><p>确定后「代理连接」下就多了一堆列表，这里选择一个显示「<font color=green>可用</font>」代理连接即可</p><p>注意 ⚠️：若所有代理都显示「<font color=gray>检查中…</font>」的话，请从上到下依次点击尝试连接（「<font color=gray>连接中…</font>」到「<font color=green>已连接</font>」可能会需要一点时间）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx04p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx04p.png" alt="NekoX_4p"></p><p>然后返回，输入手机号后就能正常的注册啦</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx05p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx05p.png" alt="NekoX_5p"></p><p>题外话，如果短信很久很久（指五分钟后还没收到）没有收到，请点击右上方的三个点，尝试切换「自定义 API」后重新接收验证码</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx06p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx06p.png" alt="NekoX_6p"></p><p>这里就需要设置姓名和头像啦～</p><p>名字就是对非联系人显示的「呢称」，姓氏的话填不填无所谓（还有，这个姓名可以不是真实姓名的啊啊啊）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx07p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx07p.png" alt="NekoX_7p"></p><p>进去后会弹出这俩个弹窗，依次确定就好（<strong>建议按提示操作！</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx08p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx08p.png" alt="NekoX_8p"><br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx09p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx09p.png" alt="NekoX_9p"></p><p>设置两步验证设置可以在 <code>侧栏</code> - <code>设置</code> - <code>隐私和安全</code> - <code>两步验证</code> 里找到</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx10p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx10p.png" alt="NekoX_10p"></p><p>密码提示应该知道是干啥的吧？这个你可别直接重复一遍密码呢（可跳过）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx11p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx11p.png" alt="NekoX_11p"></p><p>恢复邮箱的话，可以使用 QQ 邮箱，一般 QQ 邮箱是 <code>你得QQ号@qq.com</code> 的形式</p><p>当邮件发送到你邮箱时，QQ 邮件就会给你验证码，自己按提示输入即可</p><p>（顺带一提，万一你密码忘记了，又没设置恢复邮箱，那么这个账号就与你拜拜咯</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx12p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx12p.png" alt="NekoX_12p"></p><p>如果等验证邮件中途不小心退出验证界面了，可以在 <code>侧栏</code> - <code>设置</code> - <code>隐私和安全</code> - <code>两步验证</code> 里继续设置</p><hr><p>这样，最基础的注册就好了</p><h3 id="官方客户端">官方客户端</h3><p>将本网页网址在浏览器中打开（iOS 请使用 Safari；安卓则可以使用 Chrome、Edge）中打开，拉到「<a href="#%E5%85%AC%E5%85%B1%E4%BB%A3%E7%90%86">公共代理</a>」点击「点击设置代理」，点击后选择打开 Telegram 即可</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t1p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t1p.png" alt="T01p"></p><p>跳转到 Telegram 后，点击 <code>Connect Proxy</code> 如果 Status 为 Fail 的话，请尝试其它公共代理</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t2p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t2p.png" alt="T02p"></p><p>接下来输入手机号注册或登陆就行啦</p><p>如在 iOS 上注册，请在注册完成后打开<strong>两步验证</strong>、并将<strong>手机号码</strong>设置为仅联系人可见或没有人可见</p><hr><p>你现在会发现界面是英文的，看不懂咋办呢？</p><p>不用担心，Telegram 给我们提供了自定义语言包的选项，你现在只需要<a href="tg://setlanguage?lang=zhcncc">点击一下</a>，就可以打开 Telegram 套用自定义语言包啦</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t3p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t3p.png" alt="T03p"></p><p>只需要点击 <code>Change</code> 即可设置成中文啦</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t4p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t4p.png" alt="T04p"></p><p>设置好了后就不用担心看不懂咯</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t5p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/t5p.png" alt="T05p"></p><hr><p>有些代理可能会显示一个频道在消息列表的顶部，可以加入频道后将其归档，即可让它不在顶部显示</p><h2 id="小技巧">小技巧</h2><p>部分代理可能会显示一个频道在消息列表的顶部，有两种方法可以将其从消息列表顶部消失</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx13p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx13p.png" alt="NekoX_13p"></p><blockquote><p><strong>第一种</strong><br>加入它，然后将它归档</p><p><strong>第二种</strong>（仅仅适用于 Nekogram 系列)<br>在 <code>侧栏</code> - <code>设置</code> - <code>喵设置</code> - <code>通用</code> 里把 <code>隐藏代理赞助商频道</code> 开启<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx14p.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/how-to-go-tg/nx14p.png" alt="NekoX_14p"></p></blockquote><hr><p>关于 Nekogram X 的一些小技巧：</p><ul><li><ol><li>在 <code>侧栏</code> - <code>设置</code> - <code>喵设置</code> - <code>实验性</code> 中，有个 <code>代理自动切换</code>，开启后就可以不用频繁的手动切换代理了</li></ol></li></ul><h2 id="频道推荐">频道推荐</h2><p>经过上述操作，就可以正常使用 Telegram 啦</p><p>但是，对话列表中空空的啥也没有，是不是有点空虚呢？</p><p>为了防止你们注册完了就再也不打开了，所以我要推荐 more 多 more 多的频道给你们，让你们用的安逸 😆</p><p><a href="https://t.me/lufsxchannel">博主自己的频道</a> ｜ 博主自己瞎逼逼的地方 🤣</p><div class="toast toast-warning">⚠️注意：<br>博主与以下频道均无任何直接或间接的利益关系！</div><h3 id="各种资讯">各种资讯</h3><ul><li><a href="https://t.me/Cloudflare_CN">Cloudflare 在中国频道</a> | Cloudflare 周边消息</li><li><a href="https://t.me/playsales">Google Play 限免信息</a></li><li><a href="https://t.me/NewlearnerChannel">Newlearner の自留地</a> ｜ 各种各样的资讯</li><li><a href="https://t.me/solidot">Solidot</a> ｜ 奇客的资讯，重要的东西</li><li><a href="https://t.me/nekohasekai">世界世界</a> ｜ 一些资讯以及观点</li><li><a href="https://t.me/sspai">少数派 sspai</a></li><li><a href="https://t.me/BoriuJinja_Android">某一色彩羽的博麗神社</a></li><li><a href="https://t.me/awesomeopensource">每日 AWESOME 观察</a> ｜ 各种好玩的项目</li><li><a href="https://t.me/cnphotog_collect">每日摄影观察</a></li><li><a href="https://t.me/CE_Observe">每日消费电子观察</a></li><li><a href="https://t.me/siubeng_notebook">烧饼的 Android 杂谈</a></li><li><a href="https://t.me/lychee_wood">荔枝木</a></li><li><a href="https://t.me/pincongessence">蛋挞报</a></li><li><a href="https://t.me/GoogleSHIT">💊 辣鸡咕鸽毁我信仰 #CurryMyLife</a> | 《关于咕鸽如何毁掉某些人的信仰那件事》</li><li><a href="https://t.me/AppleNuts"> Apple Nuts</a> | 大佬说苹果</li></ul><h3 id="资源频道">资源频道</h3><ul><li><a href="https://t.me/AndroidRepo">Android Repository</a></li><li><a href="https://t.me/clash_for_android_channel">Clash for Android Channel</a> ｜ ClashA 的更新频道</li><li><a href="https://t.me/joinchat/AAAAAFIjQeMoWKXkTnGnTA">EMK Anime Album Sharing Channel</a> ｜ Google Photos 动画相册分享</li><li><a href="https://t.me/joinchat/AAAAAEh3nQ7C9-_yL94NQg">EMK App Sharing Channel</a> ｜ 各种各样的 APP 搬运</li><li><a href="https://t.me/onessr">MTPROTO 公益 TG 代理发放频道</a> ｜ 发放可以使用的 TG 代理</li><li><a href="https://t.me/Animenep">NEP.Anime | 动画仓库</a> ｜ 近期播出的动画番剧全都有哦</li><li><a href="https://t.me/NekogramX">NekoX Updates</a> ｜ Nekogram X 的更新频道</li><li><a href="https://t.me/softchnl">壹品閣 CH</a></li><li><a href="https://t.me/spicychickenselfmademodifiedapps">辣 🐓 自制修改版</a> ｜ 大佬修改的一些好用的软件在里面呢</li></ul><h3 id="沙雕图与视频">沙雕图与视频</h3><ul><li><a href="https://t.me/nichijou_collections">ibuki 🏖⭐️ 收藏夹</a></li><li><a href="https://t.me/goworkbitch">上班划水之沙雕图</a></li><li><a href="https://t.me/ilemonrain_channel">柠檬的日常搞怪生活</a></li><li><a href="https://t.me/woshadiao">每日沙雕墙</a></li><li><a href="https://t.me/jandan_pic">煎蛋无聊图</a></li></ul><h3 id="NSFW">NSFW</h3><div class="toast toast-warning">FBI WARN!!!</div><details><summary><font color=gray>点击显示/隐藏</font></summary><ul><li><a href="https://t.me/galgamenoHCG">(ゲーム CG) 一个兴趣使然的[NSFW-ios-XNR]</a></li><li><a href="https://t.me/danger_nsfw">Danger!? NSFW?</a></li><li><a href="https://t.me/exlolicon">ExLOLI</a></li><li><a href="https://t.me/dailyYande">Yande 站每日榜</a></li><li><a href="https://t.me/tuixiusiji">everyday color photos</a></li><li><a href="https://t.me/PictureShare">咸鱼的杂货铺(AWSL)</a></li><li><a href="https://t.me/joinchat/AAAAAFZIf_1RbKVx4Qiivw">字幕組動畫備份頻道 Anime Backup Channel [R18] [NSFW] [FanSub]</a></li><li><a href="https://t.me/qingan567">安利（NSFW）</a></li><li><a href="https://t.me/joinchat/AAAAAEgRQIEpvRAp8u1U5g">自壓動畫備份頻道 Anime Backup Channel [R18] [NSFW] [Self-Rip]</a></li><li><a href="https://t.me/Animecutegirl">［NSFW］二次元萌妹(Anime Cute Girl)</a></li></ul><p>（没错，我就只有这么一点，欢迎投稿哦～</p></details><h2 id="机器人推荐">机器人推荐</h2><p>Telegram 凭借它那自由、开放、具有官方 API 支持的机器人，使 Telegram 不单单只可以拿来聊天</p><p>接下来，为了扩展它，下面将是一个简单的机器人使用教程</p><p>机器人，顾名思义，<s>就是背后机器的人</s>，一般背后是由服务器等控制的（其实还有人形自走机器人呢），能够识别用户的发出的指令，从而进行各种各样的操作。（除部分官方机器人以外，其它的机器人在用户名后面一定是 <code>Bot</code> 字样（除非是有人拿个人账号搞机器人）</p><p>在 Telegram 中，要使用机器人就必须先按底下哪 <code>开始</code>，按下后，你就会给机器人发送一条 <code>/start</code> 的消息，接下来，你便可以发送指令给机器人啦 😋</p><p>点击聊天框的斜杆按钮里可以看到机器人支持的指令，点击即可发送。你也可以手动输入 <code>/</code> 符号，这时候，Telegram 便会自动联想指令以供输入</p><p>在手机上，还有一些小技巧，比如长按指令，你所需要的指令便会直接进入输入框，并为你自动空出一格，以便我们输入命令参数。</p><hr><p>废话就到这儿了，下面就开始推荐吧！</p><ul><li><a href="https://t.me/ChinoNyanBot">チノ喵</a><ul><li>神器 Bot！！！你可以拿它下载个大平台的无损音乐，看看 Pixiv 热门</li><li>支持下载虾米、QQ、网易云、酷狗的音乐！</li><li>使用方法：<ul><li>网易云：<code>/netease</code> + <code>歌名 / 歌手名</code></li><li>腾讯音乐：<code>/tencent</code> + <code>歌名 / 歌手名</code></li><li>虾米音乐：<code>/xiami</code> + <code>歌名 / 歌手名</code></li><li>酷狗音乐：<code>/kugou</code> + <code>歌名 / 歌手名</code></li><li>也可以直接将音乐链接分享给它</li></ul></li></ul></li><li><a href="https://t.me/WhatAnimeBot">WAIT: What Anime Is This</a><ul><li>这是啥动漫 bot</li><li>把想要找的动漫 GIF / 视频 / 图片 发给它，就可以找到哦(基本大部分动漫都找得到)</li></ul></li><li><a href="https://t.me/GetPublicLinkBot">Get Public Link Bot</a><ul><li>将 Telegram 文件发送给它，等会儿它就会给你文件直链，可以直接下载（国内可用）</li><li>速度不佳可以搭配 <a href="https://proxy.lufs.workers.dev/">https://proxy.lufs.workers.dev/</a> 使用</li><li>这家伙还可以帮你把下载的文件转存到 Google Drive（需要自行绑定）</li></ul></li><li><a href="https://t.me/GmailBot">Gmail Bot</a><ul><li>绑定 Gmail 后可以直接在 Telegram 上查看邮件</li></ul></li><li><a href="https://t.me/gdlink_bot">GDlink</a><ul><li>发送 Google Drive 链接过去，它会给你下载直链</li><li>建议配合 <a href="https://proxy.lufs.workers.dev/">https://proxy.lufs.workers.dev/</a> 使用</li></ul></li><li><a href="https://t.me/GIFDownloader_bot">TG Downloader</a><ul><li>这个于上上上面的机器人不同，这个是下载 Telegram 上哪些好好看的贴纸的说（表情包）</li></ul></li><li><a href="https://t.me/WTFisBot">WTFisBot</a><ul><li>一个无聊时可以玩玩的机器人呀</li></ul></li><li><a href="https://t.me/wangjingze_bot">王境泽</a><ul><li>发送四句话给它，它就会给你生成王境泽的表情包给你</li></ul></li><li><a href="https://t.me/SpamBot">Spam Info Bot</a><ul><li>官方的自助解除限制的机器人</li><li>由于国内手机号被滥用，无法给 +1 手机号的人发消息，可以通过这个机器人自行解除限制</li></ul></li></ul><h1 id="一些链接">一些链接</h1><p>这里统一放一些链接的说，包括下载、公共代理、语言包等链接</p><h2 id="桌面版">桌面版</h2><p>国内可直接下载</p><details><summary>点击显示/隐藏</summary><ul><li><a href="https://proxy.lufs.workers.dev/?url=https%3A%2F%2Fosx.telegram.org%2Fupdates%2FTelegram.dmg">macOS(OS X)</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/win">Windows</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/linux">Linux64</a></li><li><a href="https://proxy.lufs.workers.dev/?url=https://telegram.org/dl/desktop/linux32">Linux32</a></li></ul></details><h2 id="公共代理">公共代理</h2><p>这里提供一些公共代理</p><p>声明：本人与代理提供方无任何利益关系！</p><details><summary>点击显示/隐藏</summary><ul><li><a href="tg://proxy?server=vitamine.fun&amp;port=443&amp;secret=eed560d4c93e4b55120a5581e4c0223d6b617a7572652e6d6963726f736f66742e636f6d">点击设置代理</a></li><li><a href="tg://proxy?server=152.67.198.134&amp;port=443&amp;secret=eec69f6366690c0f5be27944ca1564106d617a7572652e6d6963726f736f66742e636f6d">点击设置代理 HK</a></li><li><a href="tg://proxy?server=agahk.v2raynb.xyz&amp;port=1009&amp;secret=eec69f6366690c0f5be27944ca1564106d617a7572652e6d6963726f736f66742e636f6d">点击设置代理 HK</a>（已炸）</li></ul></details><br><p>当然，也可以到 <a href="https://github.com/NekoX-Dev/ProxyList/">NekoX-Dev/ProxyList</a> 所维护的公共代理列表中获取</p><p>这里有一个可以解析公共代理列表的页面，可以自行逐个尝试：</p><p><a href="https://api.isteed.cc/nekoxproxy">https://api.isteed.cc/nekoxproxy</a></p><h2 id="汉化语言包">汉化语言包</h2><ul><li><a href="tg://setlanguage?lang=classic-zh">点击设置语言包</a> | 非官方，简体中文(推荐)</li><li><a href="tg://setlanguage?lang=zh-hans-beta">点击设置语言包</a> | 官方，简体中文（汉化不全）</li><li><a href="tg://setlanguage?lang=zh-hant-raw">点击设置语言包</a> | 官方，繁体中文</li><li><a href="tg://setlanguage?lang=zhcncc">点击设置语言包</a> | 非官方，简体中文</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;世界上有一个软件，它能做到能在所有设备都有优秀的统一使用体验，兼容个大桌面平台（macOS/Windows/Linux）以及移动平台（iOS/Android/&lt;s&gt;Windows Phone&lt;/s&gt;）甚至还在 &lt;a href=&quot;https://web.telegram.org/&quot;&gt;Web&lt;/a&gt; 都有几乎完整的体验。&lt;/p&gt;
&lt;p&gt;为了让更多的人知道这难道不易的优秀 IM (聊天) 体验，便写了此篇入坑指南&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Telegram" scheme="https://blog.isteed.cc/tags/Telegram/"/>
    
    <category term="Nekogram" scheme="https://blog.isteed.cc/tags/Nekogram/"/>
    
    <category term="互联网" scheme="https://blog.isteed.cc/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>小身材，大能量 —— 迟来的小米 GaN 充电器 65W 开箱（和一些简单的体验</title>
    <link href="https://blog.isteed.cc/post/xiaomi-65w-gan/"/>
    <id>https://blog.isteed.cc/post/xiaomi-65w-gan/</id>
    <published>2020-05-30T19:28:49.000Z</published>
    <updated>2020-05-30T22:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起还有个三月份购入的小米 GaN 充电头，现在伪开箱一波～ 🤣</p><span id="more"></span><p>在小米商城 APP 中俩次均未抢到，目光一转，小程序！</p><p>小程序第一次就抢到了，早知如此，还何必等一次又一次的开售抢啊（垃圾小米商城</p><h1 id="开箱">开箱</h1><p>首先是盒子，小米祖传的白色简洁风</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/02p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/02p.jpg" alt="02p"></p><p>从背面轻轻的划开塑封，正过来，让它缓缓下落</p><p>背面有一些参数和介绍</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/03p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/03p.jpg" alt="03p"></p><p>啪，本体出来咯</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/04p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/04p.jpg" alt="04p"></p><p>把填充的东西拿出来，「本体」就出来了 😆</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/01p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/01p.jpg" alt="01p"></p><p>放只巨能写对比一下大小</p><p>不得不说，送的这条 5A 带 E-Marker 的线是真的粗，就是有<strong>点点</strong>短</p><p>（不支持 USB 3.x 数据传输</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/05p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/05p.jpg" alt="05p"><br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/06p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/06p.jpg" alt="06p"></p><p>最后拿出我仅带回老家的俩个头，一放边上，大小一目了然</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/07p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/07p.jpg" alt="07p"><br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/08p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/08p.jpg" alt="08p"></p><h1 id="简评">简评</h1><p>初上手第一感觉是重、踏实，接着便想到在这个体积下居然达到了 65W 功率，不得不惊叹 GaN 的厉害</p><h2 id="充电">充电</h2><p>充电头嘛，就是拿来充电的呢（<s>不能充电的充电头还能叫充电头？</s></p><p>插上我的 Pixel 2，充了会发现完大材小用了，充电头那是完全不想动，几乎都没有发热的说（这。。这就是 GaN 的力量吗？</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp2.jpg" alt="简评1"></p><hr><p>不想动？那就压一压它，上诱骗线 😆</p><p>MacBook Air 使用诱骗线充电，原装头为 45W，所购入的诱骗线支持 45W/60W 功率。</p><p>骗到了 51.77W ～</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp1.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp1.jpeg" alt="简评2"></p><p>经测试，最高功率达到了 54.7W<br>（注：这个软件的纵坐标是数据顶上去的，所以纵坐标最高就是最高的数据啦</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp3.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/xiaomi-65w-gan/jp3.png" alt="简评3"></p><p>这时，热量就大大大了起来，充电器就烫手了起来（废话），摸着似乎有个四五十度的样子</p><hr><p>当快充满时，功率逐渐减小，若是冲入手机的话，充电头便会开始「啸叫」，声音挺大的（无对比对象，无法评价）</p><h1 id="碎碎念">碎碎念</h1><ul><li>GaN 挂诱骗线真香</li><li>体积是真滴小<ul><li>（可惜脚不能折叠</li><li>（无所谓啦，都那么小，还要啥自行车</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;突然想起还有个三月份购入的小米 GaN 充电头，现在伪开箱一波～ 🤣&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="开箱" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/%E5%BC%80%E7%AE%B1/"/>
    
    
    <category term="小米" scheme="https://blog.isteed.cc/tags/%E5%B0%8F%E7%B1%B3/"/>
    
    <category term="GaN" scheme="https://blog.isteed.cc/tags/GaN/"/>
    
    <category term="充电头" scheme="https://blog.isteed.cc/tags/%E5%85%85%E7%94%B5%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用 Cloudflare 对 GitHub 文件加速</title>
    <link href="https://blog.isteed.cc/post/cloudflare-gh-proxy/"/>
    <id>https://blog.isteed.cc/post/cloudflare-gh-proxy/</id>
    <published>2020-05-09T09:03:04.000Z</published>
    <updated>2020-05-09T15:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年四月初，在频道看见一个可以利用 Cloudflare 加速 GitHub 文件的项目。</p><span id="more"></span><p>我看见后，便按起了 <kbd>command</kbd> + <kbd>C</kbd>，<kbd>command</kbd> + <kbd>V</kbd></p><p>复制粘贴保存解析，设置 worker 规则，一顿操作</p><p>啪，GitHub 加速就是我滴啦</p><p><a href="https://github.com/hunshcn/gh-proxy">GitHub 开源项目</a><br>我「美化」过的<a href="https://gh.isteed.cc/">站点</a></p><h1 id="部署">部署</h1><p>要自己部署很简单，把全部的 代码 粘贴到 Cloudflare 就行了</p><p><a href="https://github.com/hunshcn/gh-proxy">项目</a>有中文文档，Cloudflare 现在也有中文，自己就可以轻松部署（</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * static files (404.html, sw.js, conf.js)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> ASSET_URL = <span class="string">&quot;https://hunshcn.github.io/gh-proxy&quot;</span>;</span><br><span class="line"><span class="comment">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span></span><br><span class="line"><span class="keyword">const</span> PREFIX = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="comment">// git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启</span></span><br><span class="line"><span class="keyword">const</span> Config = &#123;</span><br><span class="line">  <span class="attr">jsdelivr</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">cnpmjs</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;RequestInit&#125;</span> </span>*/</span></span><br><span class="line"><span class="keyword">const</span> PREFLIGHT_INIT = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">204</span>,</span><br><span class="line">  <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">    <span class="string">&quot;access-control-allow-origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;access-control-allow-methods&quot;</span>:</span><br><span class="line">      <span class="string">&quot;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;access-control-max-age&quot;</span>: <span class="string">&quot;1728000&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> <span class="variable">body</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">status</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&lt;string, string&gt;&#125;</span> <span class="variable">headers</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRes</span>(<span class="params">body, status = <span class="number">200</span>, headers = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  headers[<span class="string">&quot;access-control-allow-origin&quot;</span>] = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(body, &#123; status, headers &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">urlStr</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newUrl</span>(<span class="params">urlStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ret = fetchHandler(e).catch(<span class="function">(<span class="params">err</span>) =&gt;</span></span><br><span class="line">    makeRes(<span class="string">&quot;cfworker error:\n&quot;</span> + err.stack, <span class="number">502</span>)</span><br><span class="line">  );</span><br><span class="line">  e.respondWith(ret);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;FetchEvent&#125;</span> <span class="variable">e</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> req = e.request;</span><br><span class="line">  <span class="keyword">const</span> urlStr = req.url;</span><br><span class="line">  <span class="keyword">const</span> urlObj = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">  <span class="keyword">let</span> path = urlObj.searchParams.get(<span class="string">&quot;q&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (path) &#123;</span><br><span class="line">    <span class="keyword">return</span> Response.redirect(<span class="string">&quot;https://&quot;</span> + urlObj.host + PREFIX + path, <span class="number">301</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// cfworker 会把路径中的 `//` 合并成 `/`</span></span><br><span class="line">  path = urlObj.href</span><br><span class="line">    .substr(urlObj.origin.length + PREFIX.length)</span><br><span class="line">    .replace(<span class="regexp">/^https?:\/+/</span>, <span class="string">&quot;https://&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> exp1 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span>;</span><br><span class="line">  <span class="keyword">const</span> exp2 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob)\/.*$/i</span>;</span><br><span class="line">  <span class="keyword">const</span> exp3 = <span class="regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-upload-pack).*$/i</span>;</span><br><span class="line">  <span class="keyword">const</span> exp4 = <span class="regexp">/^(?:https?:\/\/)?raw\.githubusercontent\.com\/.+?\/.+?\/.+?\/.+$/i</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    path.search(exp1) === <span class="number">0</span> ||</span><br><span class="line">    (!Config.jsdelivr &amp;&amp; path.search(exp2) === <span class="number">0</span>) ||</span><br><span class="line">    (!Config.cnpmjs &amp;&amp; (path.search(exp3) === <span class="number">0</span> || path.search(exp4)))</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> httpHandler(req, path);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp2) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newUrl = path</span><br><span class="line">      .replace(<span class="string">&quot;/blob/&quot;</span>, <span class="string">&quot;@&quot;</span>)</span><br><span class="line">      .replace(<span class="regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="string">&quot;https://cdn.jsdelivr.net/gh&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp3) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newUrl = path.replace(</span><br><span class="line">      <span class="regexp">/^(?:https?:\/\/)?github\.com/</span>,</span><br><span class="line">      <span class="string">&quot;https://github.com.cnpmjs.org&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.search(exp4) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newUrl = path</span><br><span class="line">      .replace(<span class="regexp">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span class="string">&quot;@$1&quot;</span>)</span><br><span class="line">      .replace(</span><br><span class="line">        <span class="regexp">/^(?:https?:\/\/)?raw\.githubusercontent\.com/</span>,</span><br><span class="line">        <span class="string">&quot;https://cdn.jsdelivr.net/gh&quot;</span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">return</span> Response.redirect(newUrl, <span class="number">302</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(ASSET_URL + path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Request&#125;</span> <span class="variable">req</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">pathname</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpHandler</span>(<span class="params">req, pathname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reqHdrRaw = req.headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// preflight</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    req.method === <span class="string">&quot;OPTIONS&quot;</span> &amp;&amp;</span><br><span class="line">    reqHdrRaw.has(<span class="string">&quot;access-control-request-headers&quot;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, PREFLIGHT_INIT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rawLen = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reqHdrNew = <span class="keyword">new</span> Headers(reqHdrRaw);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> urlStr = pathname;</span><br><span class="line">  <span class="keyword">if</span> (urlStr.startsWith(<span class="string">&quot;github&quot;</span>)) &#123;</span><br><span class="line">    urlStr = <span class="string">&quot;https://&quot;</span> + urlStr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> urlObj = newUrl(urlStr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@type <span class="type">&#123;RequestInit&#125;</span> </span>*/</span></span><br><span class="line">  <span class="keyword">const</span> reqInit = &#123;</span><br><span class="line">    <span class="attr">method</span>: req.method,</span><br><span class="line">    <span class="attr">headers</span>: reqHdrNew,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;follow&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: req.body,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> proxy(urlObj, reqInit, rawLen, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;URL&#125;</span> <span class="variable">urlObj</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;RequestInit&#125;</span> <span class="variable">reqInit</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">urlObj, reqInit, rawLen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(urlObj.href, reqInit);</span><br><span class="line">  <span class="keyword">const</span> resHdrOld = res.headers;</span><br><span class="line">  <span class="keyword">const</span> resHdrNew = <span class="keyword">new</span> Headers(resHdrOld);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// verify</span></span><br><span class="line">  <span class="keyword">if</span> (rawLen) &#123;</span><br><span class="line">    <span class="keyword">const</span> newLen = resHdrOld.get(<span class="string">&quot;content-length&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> badLen = rawLen !== newLen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (badLen) &#123;</span><br><span class="line">      <span class="keyword">return</span> makeRes(res.body, <span class="number">400</span>, &#123;</span><br><span class="line">        <span class="string">&quot;--error&quot;</span>: <span class="string">`bad len: <span class="subst">$&#123;newLen&#125;</span>, except: <span class="subst">$&#123;rawLen&#125;</span>`</span>,</span><br><span class="line">        <span class="string">&quot;access-control-expose-headers&quot;</span>: <span class="string">&quot;--error&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> status = res.status;</span><br><span class="line">  resHdrNew.set(<span class="string">&quot;access-control-expose-headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  resHdrNew.set(<span class="string">&quot;access-control-allow-origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">  resHdrNew.delete(<span class="string">&quot;content-security-policy&quot;</span>);</span><br><span class="line">  resHdrNew.delete(<span class="string">&quot;content-security-policy-report-only&quot;</span>);</span><br><span class="line">  resHdrNew.delete(<span class="string">&quot;clear-site-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(res.body, &#123;</span><br><span class="line">    status,</span><br><span class="line">    <span class="attr">headers</span>: resHdrNew,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这上面的代码片段复制粘贴到 Workers 里就可以啦（没错，就是那么简单）</p><h1 id="「美化」">「美化」</h1><p>我觉得越来的网页有点复杂，就对它进行了一点点的精简/美化</p><p>顺便适配了下暗色主题～</p><p>按钮那边加了个花里胡哨的动画</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/cloudflare-gh-proxy/white.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/cloudflare-gh-proxy/white.png" alt="white"><br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/cloudflare-gh-proxy/dark.png" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/cloudflare-gh-proxy/dark.png" alt="dark"></p><h1 id="应用">应用</h1><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-const ASSET_URL = &#x27;https://hunshcn.github.io/gh-proxy&#x27;</span></span><br><span class="line"><span class="addition">+const ASSET_URL = &#x27;https://isteed.cc/gh&#x27;</span></span><br></pre></td></tr></table></figure><p>将上面的 <code>ASSET_URL</code> 后的网址替换成 <code>https://isteed.cc/gh</code> 就好了</p><h1 id="碎碎念">碎碎念</h1><p>GitHub 作为全球最大的代码托管平台之一，但由于网络环境的问题，国内下载/访问速度普遍偏慢（我所在地区还无法正常访问 <code>raw.githubusercontent.com</code></p><p>好了，水完一篇了～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今年四月初，在频道看见一个可以利用 Cloudflare 加速 GitHub 文件的项目。&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="Cloudflare" scheme="https://blog.isteed.cc/tags/Cloudflare/"/>
    
    <category term="GitHub" scheme="https://blog.isteed.cc/tags/GitHub/"/>
    
    <category term="Proxy" scheme="https://blog.isteed.cc/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Now.sh 与 GitHub Pages 的双线部署</title>
    <link href="https://blog.isteed.cc/post/vercel-github-pages/"/>
    <id>https://blog.isteed.cc/post/vercel-github-pages/</id>
    <published>2020-05-04T15:00:00.000Z</published>
    <updated>2020-05-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何用双线呢？需要国内的域名解析，国内线路解析个，海外线路解析个就行了，就酱！</p><span id="more"></span><hr><p>/　　双线部署解析是怎么回事呢？双线部署相信大家都很熟悉，但是双线部署解析是怎么搞呢，下面就让小编带大家一起了解吧。<br>/　　双线部署解析，其实就是把解析域名过去，大家可能会很惊讶双线部署怎么解析呢？但事实就是这样，小编也感到非常惊讶。<br>/　　这就是关于双线部署解析的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</p><hr><p><a href="https://github.com/">Github</a><br><a href="https://vercel.com/">Now.sh</a></p><h1 id="GitHub-Pages">GitHub Pages</h1><p>开启 GitHub Pages</p><p><code>GitHub Pages 仓库</code> - <code>Settings</code> - <code>Options</code> - <code>GitHub Pages</code></p><p>勾选即可</p><hr><p><strong>添加自定义域名</strong></p><p>在 Hexo 的 <code>./source/</code> 下添加 <code>CNAME</code> 文件，内容你域名</p><p>其它静态部署的话，只要在 GitHub Pages 仓库下存在 <code>CNAME</code> 文件即可</p><h1 id="Vercel">Vercel</h1><p>绑定 GitHub Pages 仓库</p><p><code>Import Project</code> - <code>From Git Repository</code> - <code>Import Project from GitHub</code></p><p>选择 <code>username.github.io</code> 的仓库</p><p>然后一路 <code>Continue</code> 下去就可以了</p><hr><p><strong>添加自定义域名</strong></p><p><code>Project Settings</code> - <code>Domain</code> - <code>Add</code></p><p>输入你域名即可</p><h1 id="解析商">解析商</h1><p>添加 CNAME 记录，解析线路海外，内容为 <code>username.githb.io</code></p><p>添加 A 记录，解析线路国内，内容为…下面选个 <a href="http://Now.sh">Now.sh</a> 的 IP 地址丢进去就行</p><p>接着稍等会儿即可～</p><hr><p>这里丢一波 <a href="http://Now.sh">Now.sh</a> 家的 IP 地址</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">34.95.57.145</span> <span class="string">[加拿大 魁北克省蒙特利尔 Google 云计算数据中心]</span></span><br><span class="line"><span class="number">13.49.54.242</span> <span class="string">[瑞典 斯德哥尔摩 Amazon 数据中心]</span></span><br><span class="line"><span class="number">18.178.194.147</span> <span class="string">[日本 东京都东京 Amazon 数据中心]</span></span><br><span class="line"><span class="number">52.79.72.148</span> <span class="string">[韩国 首尔 Amazon 数据中心]</span></span><br><span class="line"><span class="number">35.180.16.12</span> <span class="string">[法国 巴黎 Amazon 数据中心]</span></span><br><span class="line"><span class="number">18.206.69.11</span> <span class="string">[美国 弗吉尼亚州阿什本 Amazon 数据中心]</span></span><br><span class="line"><span class="number">52.76.85.65</span> <span class="string">[新加坡 Amazon 数据中心]</span></span><br><span class="line"><span class="number">18.130.52.74</span> <span class="string">[英国 伦敦 Amazon 数据中心]</span></span><br><span class="line"><span class="number">35.202.100.12</span> <span class="string">[美国 Merit 网络公司]</span></span><br><span class="line"><span class="number">35.195.188.93</span> <span class="string">[比利时 瓦隆大区圣吉斯兰 Google 云计算数据中心]</span></span><br><span class="line"><span class="number">3.22.103.24</span> <span class="string">[美国 Amazon EC2 服务器]</span></span><br><span class="line"><span class="number">34.253.160.225</span> <span class="string">[爱尔兰 都柏林 Amazon 数据中心]</span></span><br><span class="line"><span class="number">18.229.231.184</span> <span class="string">[巴西]</span></span><br><span class="line"><span class="number">15.206.54.182</span> <span class="string">[美国 惠普 HP]</span></span><br><span class="line"><span class="number">35.235.101.253</span> <span class="string">[美国 加利福尼亚州洛杉矶 Google 云计算数据中心]</span></span><br><span class="line"><span class="number">35.196.196.42</span> <span class="string">[美国 Merit 网络公司]</span></span><br><span class="line"><span class="number">35.228.53.122</span> <span class="string">[美国 俄勒冈州达尔斯 Google 云计算数据中心]</span></span><br><span class="line"><span class="number">34.65.228.161</span> <span class="string">[美国 得克萨斯州]</span></span><br><span class="line"><span class="number">52.38.79.87</span> <span class="string">[美国 俄勒冈州波特兰 Amazon 数据中心]</span></span><br><span class="line"><span class="number">13.238.105.1</span> <span class="string">[澳大利亚 新南威尔士州悉尼 Amazon 数据中心]</span></span><br><span class="line"><span class="number">104.199.217.228</span> <span class="string">[台湾省彰化县 Google 云计算数据中心]</span></span><br><span class="line"><span class="number">52.9.164.177</span> <span class="string">[美国 加利福尼亚州旧金山 Amazon 数据中心]</span></span><br><span class="line"><span class="number">18.162.37.140</span> <span class="string">[香港 Amazon 数据中心]</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">api-yul1.zeit.co</span><br><span class="line">api-arn1.zeit.co</span><br><span class="line">api-hnd1.zeit.co</span><br><span class="line">api-icn1.zeit.co</span><br><span class="line">api-cdg1.zeit.co</span><br><span class="line">api-iad1.zeit.co</span><br><span class="line">api-sin1.zeit.co</span><br><span class="line">api-lhr1.zeit.co</span><br><span class="line">api-oma1.zeit.co</span><br><span class="line">api-bru1.zeit.co</span><br><span class="line">api-cle1.zeit.co</span><br><span class="line">api-dub1.zeit.co</span><br><span class="line">api-gru1.zeit.co</span><br><span class="line">api-bom1.zeit.co</span><br><span class="line">api-lax1.zeit.co</span><br><span class="line">api-chs1.zeit.co</span><br><span class="line">api-hel1.zeit.co</span><br><span class="line">api-zrh1.zeit.co</span><br><span class="line">api-pdx1.zeit.co</span><br><span class="line">api-syd1.zeit.co</span><br><span class="line">api-tpe1.zeit.co</span><br><span class="line">api-sfo1.zeit.co</span><br><span class="line">api-hkg1.zeit.co</span><br></pre></td></tr></table></figure><hr><p>这里丢波 GitHub Pages 的 IP 地址</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">185.199.108.153</span> <span class="string">[美国 GitHub+Fastly 节点]</span></span><br><span class="line"><span class="number">185.199.109.153</span> <span class="string">[美国 GitHub+Fastly 节点]</span></span><br><span class="line"><span class="number">185.199.110.153</span> <span class="string">[美国 GitHub+Fastly 节点]</span></span><br><span class="line"><span class="number">185.199.111.153</span> <span class="string">[美国 GitHub+Fastly 节点]</span></span><br></pre></td></tr></table></figure><h1 id="总结">总结</h1><p>就是国内解析可以分线路，国内线路用 A 或 CNAME 记录，海外线路用 CNAME 或 A 记录（这俩可以共存）</p><p>上面那堆 IP ping 下看看哪个快就行了 🤣</p><h1 id="碎碎念">碎碎念</h1><p>又又水了一篇～ 😋</p><p>（反正我挂 Cloudflare，单线，有「镜像站」而已</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何用双线呢？需要国内的域名解析，国内线路解析个，海外线路解析个就行了，就酱！&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="Hexo" scheme="https://blog.isteed.cc/tags/Hexo/"/>
    
    <category term="博客" scheme="https://blog.isteed.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="now.sh" scheme="https://blog.isteed.cc/tags/now-sh/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo</title>
    <link href="https://blog.isteed.cc/post/hexo-github-action/"/>
    <id>https://blog.isteed.cc/post/hexo-github-action/</id>
    <published>2020-05-03T15:00:00.000Z</published>
    <updated>2020-08-31T06:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是已经老久前挖的坑, 现在看来是要填了 🤣</p><p>使用 CI 有啥好处呢？</p><p>随时随地, 开个网页, 只要分支有 push 便会自动构建、部署博客～</p><p>高集成, 所有用到的东西都不用离开 <a href="http://github.com">github.com</a></p><span id="more"></span><h1 id="工具">工具</h1><ul><li>GitHub 账号一枚</li><li>Git</li><li>NodeJS</li></ul><h1 id="准备">准备</h1><h2 id="站点准备">站点准备</h2><p>首先肯定先安装个 Hexo 啦</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后在一个空文件夹下 执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后按照喜好配置你的 Hexo 站点～</p><p>最后在 GitHub 上创建一个 GitHub Pages 仓库和一个 Hexo 博客文件仓库/分支（</p><p>（说一下, 个人主题是 Fork 了一份稍微改了一下, 然后 git submodule 挂上去的说, 所以 workflow 中有同步子模块的一步）</p><h1 id="GitHub-准备">GitHub 准备</h1><p>打开 <a href="http://github.com">github.com</a></p><p>在 <code>Settings</code> - <code>Developer settings</code> - <code>Personal access tokens</code> - <code>Generate new token</code> 中创建密钥</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_1.jpg" alt="prepare"></p><p>然后勾选 <code>repo</code>, 拉到最下面, <code>Generate toker</code></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_2.jpg" alt="prepare"></p><p>最后将生成的 token 保存下来（只会<strong>出现一次</strong>, 一定一定记得存下来！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_3.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_3.jpg" alt="prepare"></p><hr><p>接下来在你 Hexo 博客文件仓库/分支所在的仓库 的 <code>Settings</code> - <code>Secrets</code> - <code>Add a new secret</code> 创建俩个变量分别是</p><p><code>GH_REF</code> 内容为你 GitHub Pages 仓库的地址（不用带 https<br><code>GH_TOKEN</code> 内容为上面所获取的 token</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_4.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/prepare_4.jpg" alt="prepare"></p><p>至此, 就差不多准备好了 😋</p><h1 id="workflows">workflows</h1><p>如果只是要个 workflows 的话, <a href="#%e6%88%90%e5%93%81">点我跳转到成品</a></p><h2 id="过程解释">过程解释</h2><ol><li>名称, 这个随意取</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span></span><br></pre></td></tr></table></figure><ol start="2"><li>指定触发 workflow 的事件, 这里选择的是推送至指定分支的事件</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span> <span class="comment"># 这里是推送事件</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 这里指定了推送的分支</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置时区, 这里设置的是上海的呢</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><ol start="4"><li>指定 workflow 所运行的系统, 这里是设置最新的 Ubuntu</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">blog-cicd:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">build</span> <span class="string">and</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br></pre></td></tr></table></figure><ol start="5"><li>检出代码, 设置 Node 环境</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">submodules:</span> <span class="string">&quot;true&quot;</span> <span class="comment"># 如需同步子模块, 请取消注释</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-node@v1.1.0</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&quot;12.x&quot;</span> <span class="comment"># Node 的版本</span></span><br></pre></td></tr></table></figure><ol start="6"><li><s>同步主题, 我这里是 Fork 了一份主题并添加成了子模块的说, 如果没有使用子模块的话, 这一步可以忽略</s></li></ol><p>请看 <code>5.</code> 的注释</p><p>如果你的主题未做修改的话, 那你可以直接 git clone 下来使用, 在 <code>.gitignore</code> 中添加忽略（当然, 你直接在仓库中存在也行, 不过那样的话看目录结构会复杂一点）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">submodules</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    auth_header=&quot;$(git config --local --get http.https://github.com/.extraheader)&quot;</span></span><br><span class="line"><span class="string">    git submodule sync --recursive</span></span><br><span class="line"><span class="string">    git -c &quot;http.extraheader=$auth_header&quot; -c protocol.version=2 submodule update --init --force --recursive --depth=1</span></span><br></pre></td></tr></table></figure><ol start="7"><li>缓存 <code>~/.npm</code> 目录, 加快构建速度</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Node</span> <span class="string">Dependencies</span> <span class="comment"># Npm 缓存, 这一步报错的话, 把这部分删掉即可</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-npm-caches-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>安装依赖, 个人使用的主题也需要安装一次, 但大部分主题不需要安装, 这里便没有贴出</li></ol><p>如果主题需要安装依赖的话, <code>cd</code> 过去安装即可（Ubuntu 环境～</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    npm install hexo-cli -g</span></span><br><span class="line"><span class="string">    npm install</span></span><br><span class="line"><span class="string">    # cd /theme/name</span></span><br><span class="line"><span class="string">    # npm install</span></span><br></pre></td></tr></table></figure><ol start="9"><li>生成文件, 我主题是挂子模块的, 子模块中我不想它出现配置, 所以这里有个 <code>mv</code> 操作将目录下的 <code>_config.theme.yml</code> 移动并重命名为 <code>_config.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="comment">#    mv ./_config.theme.yml ./themes/themename/_config.yml</span></span><br><span class="line">    <span class="string">hexo</span> <span class="string">generate</span></span><br></pre></td></tr></table></figure><ol start="10"><li>部署到到 GitHub Pages 仓库</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_REF</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">    <span class="attr">full_commit_message:</span> <span class="string">GitHub</span> <span class="string">Actions</span> <span class="string">Auto</span> <span class="string">Builder</span></span><br><span class="line">    <span class="attr">disable_nojekyll:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="扩展">扩展</h2><p>由于个人将 GitHub Pages 仓库也绑定到 <a href="http://Now.sh">Now.sh</a> 了, 所以需要添加 <code>now.json</code> 设置 404 页面（本博客的 <a href="http://Now.sh">Now.sh</a> 域名 <a href="http://blog.isteed.cc">blog.isteed.cc</a>）（其它的规则懒得整～</p><p>所以我将 now.json 文件存储到博客源文件的根目录下, 在生成文件后将其移动过去</p><p>这样的话, 我觉得也可以做个双线部署用用, coding 似乎使用的是新加坡腾讯云, 而 <a href="http://Now.sh">Now.sh</a> 则有香港、台湾谷歌云, 速度蛮快的说（注: <a href="http://Now.sh">Now.sh</a> 有流量限制, 不过应对我这种博客没啥人的还是够了 🤣）</p><h1 id="成品">成品</h1><p>最后的 workflow</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog-cicd:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">build</span> <span class="string">and</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Node</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-npm-caches-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="comment">#          mv ./_config.theme.yml ./themes/themename/_config.yml</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_REF</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">full_commit_message:</span> <span class="string">GitHub</span> <span class="string">Actions</span> <span class="string">Auto</span> <span class="string">Builder</span></span><br><span class="line">          <span class="attr">disable_nojekyll:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="碎碎念">碎碎念</h1><p>GitHub Actions 真的是太太太好了, 那么高配置的服务器, 那么强的<strong>国际</strong>带宽, 免费用户的私有仓库都有 2000min 的时间用, 公开仓库甚至还免费不限时, 系统方面不仅有 Ubuntu、Windows 甚至还有 macOS！！！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/broken.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/hexo-github-action/broken.jpg" alt="broken"></p><p>GitHub 牛逼！巨硬牛逼！（希望少点咖喱味</p><h1 id="参考链接">参考链接</h1><p><a href="https://xirikm.net/2019/826-2.html">昔日的夕阳</a><br><a href="https://github.com/features/actions">Github Actions</a><br><a href="https://vercel.com/">Vercel</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是已经老久前挖的坑, 现在看来是要填了 🤣&lt;/p&gt;
&lt;p&gt;使用 CI 有啥好处呢？&lt;/p&gt;
&lt;p&gt;随时随地, 开个网页, 只要分支有 push 便会自动构建、部署博客～&lt;/p&gt;
&lt;p&gt;高集成, 所有用到的东西都不用离开 &lt;a href=&quot;http://github.com&quot;&gt;github.com&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub Actions" scheme="https://blog.isteed.cc/tags/GitHub-Actions/"/>
    
    <category term="Hexo" scheme="https://blog.isteed.cc/tags/Hexo/"/>
    
    <category term="博客" scheme="https://blog.isteed.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Now.sh" scheme="https://blog.isteed.cc/tags/Now-sh/"/>
    
  </entry>
  
  <entry>
    <title>关于 MIUI 12 的瞎吐槽</title>
    <link href="https://blog.isteed.cc/post/think-changer-of-miui-12/"/>
    <id>https://blog.isteed.cc/post/think-changer-of-miui-12/</id>
    <published>2020-05-01T15:00:00.000Z</published>
    <updated>2020-05-01T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，小米开了一场发布会～</p><p>闲来无事就准备对这次<s>发布会</s>MIUI 12 吐吐槽 😆</p><span id="more"></span><p>本次发布会总结：</p><p>MIUI12 蹭 小米 10 青春版的热度 ❌<br>小米 10 青春版蹭 MIUI12 的热度 ✅</p><h1 id="MIUI-12-发布">MIUI 12 发布</h1><p>我将这次 MIUI 12 发布会分为俩个阶段，以出现「新功能」结束第一阶段</p><p>这里主要是挑槽点，优点啥的文中应该不会出现的说</p><h2 id="阶段一">阶段一</h2><p>雷雷将话筒一丢，啪，场面一切，MIUI 12 发布会！</p><hr><p>上来就讲动画。。。介绍了个自家独创的物理引擎（方便自己更好的进行魔改呢</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a01p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a01p.jpeg" alt="a"></p><hr><p>没想到这个都能单独拿出来讲，这不就是 Android 上的自适应图标么？你 MIUI 也就加了个退出后的多余动画呢</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a02p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a02p.jpeg" alt="a"></p><hr><p>这奖励动画。。。似乎优点熟悉呢（Telegram！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a03p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a03p.jpeg" alt="a"></p><hr><p>有人记得 N 久以前电池电量的圆柱 + 不同颜色 + 大阴影设计嘛？</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a04p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a04p.jpeg" alt="a"></p><hr><p>这动效，Pixel 系列壁纸的动效超级加倍版 😂</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a05p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a05p.jpeg" alt="a"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a06p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a06p.jpeg" alt="a"></p><hr><p>其实 Android 自带的 APPOPS 就可以看到这些记录，在 Lineage 上的还有各类统计呢（MIUI 还详细到加入了单次时间节点，这个不错）</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a07p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a07p.jpeg" alt="a"></p><hr><p>链式唤醒？切断？IFW？难道内置了 IFW 规则？！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a08p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a08p.jpeg" alt="a"></p><hr><p>Android 10 的特性 🤔（小米已经魔改过的，估计会下发到非支持这个特性的系统版本，这是个好的</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a09p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a09p.jpeg" alt="a"></p><p>如何定义「说清权限用途」，如何定义「如何定义『说清权限用途』」…（禁止禁止套娃</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a10p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a10p.jpeg" alt="a"></p><hr><p>隐匿面具？面具？Magisk？（无端联想</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a11p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a11p.jpeg" alt="a"></p><p>空白通行证？返回空白的设备标示？这个功能又是魔改至 APPOPS（Lineage 也支持返回空值 🤣</p><p>国内毒瘤估计会针对这个进化出「请到设置中将『空白通行证』取消设置」的提示了（没错，又是那种不给不让用的</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a12p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a12p.jpeg" alt="a"></p><p>只提供虚拟的身份 ID 给应用？（演示时中英文之间不空格差评</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a13p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a13p.jpeg" alt="a"></p><p>归还数据自由的权力？！不过。。这界面怎么这么熟悉，有蹊跷！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a14p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a14p.jpeg" alt="a"></p><blockquote><p>中国喜欢自己搞一套，以下是中国叫法对应 Google 文档<br>UDID 对应 IMEI 或类似物<br>OAID 对应广告 ID<br>VAID 对应 SSAID<br>AAID 对应 UUID</p></blockquote><p><a href="https://t.me/Lx_channel/7">消息来源 FW</a></p><hr><p>接着就介绍多任务了呢</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a15p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a15p.jpeg" alt="a"></p><p>小窗。。。<br>Samsung：？？？<br>Android 开发者选项的自由窗口：？！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a16p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a16p.jpeg" alt="a"></p><p>功能创意来源估计是三星的浮动通知，不过似乎优化的体验不错？</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a17p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/a17p.jpeg" alt="a"></p><h2 id="阶段二">阶段二</h2><p>好，实锤以上功能全是借鉴或魔改的 😂</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b01p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b01p.jpeg" alt="b"></p><hr><p>定向自动接听。。。谷歌助理：？</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b02p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b02p.jpeg" alt="b"></p><hr><p>这种记录，Google 也有的说（没 MIUI 的详细（垃圾咕鸽</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b03p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b03p.jpeg" alt="b"></p><hr><p>提到 Google 啦（没错，我 MIUI 就是找 Google 取经的说！</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b04p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b04p.jpeg" alt="b"></p><hr><p>全部离线模型。。。没错，就是 Google 用的哪些！（睡眠识别。。。可以算作弱化弱化后的闻曲知音了吧～（强行扯</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b05p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/b05p.jpeg" alt="b"></p><h1 id="小米-10-青春版发布">小米 10 青春版发布</h1><p>先是雷雷上来说劳资要冲击高端～（个别厂商「不，你还是性价比」</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c01p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c01p.jpeg" alt="c"></p><hr><p>引出了「小米 10 青春版」的宣传图</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c02p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c02p.jpeg" alt="c"></p><hr><p>常程上来了（状态不太好，似乎</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c03p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c03p.jpeg" alt="c"></p><hr><p>介绍了一波重量厚度。。。（吐血</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c04p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c04p.jpeg" alt="c"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c05p.jpeg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/c05p.jpeg" alt="c"></p><p>192g 7.88mm 你告诉我轻薄？？？</p><p>你让 S20 情何以堪 🤔</p><p>小屏党的末日快来了 😭</p><h1 id="MIUI-12-系统吐槽">MIUI 12 系统吐槽</h1><p><strong>状态栏</strong></p><p>状态栏又又被改成那样子了（逐渐 iOS 化</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/d01p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/d01p.jpg" alt="d"></p><p>MIUI 还认为标题应该用细体 🤔</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/d02p.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/think-changer-of-miui/d02p.jpg" alt="d"></p><p>手机越来越长的今天，通知那么上面 🤔</p><p>看群组里，也有人说对有「按钮」的通知适配不好，逻辑怪的很 🤔</p><p><strong>后台</strong></p><p>规整的瀑布流好评，优化横屏应用打开好评</p><p>所以，什么时候优化横竖屏应用切换呢？</p><p><strong>字体</strong></p><p>MIUI 的设计师依旧字重滥用 😅</p><p><strong>卡顿</strong></p><p>动画还是有些地方有或多或少的掉帧（算了，我也不云了，到时候去摸摸同学的机机</p><p><strong>输入框</strong></p><p>你 MIUI 啊，还不支持应用自定义扩展菜单。。。</p><p>还是魔改的光标行为（不过有说 MIUI 将要光标 API 恢复原生行为（当初有一部分原因是因为输入框的原因离开 MIUI 的说</p><h1 id="碎碎念">碎碎念</h1><p>我，云！<br>我，吐槽！<br>我，原生党！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近，小米开了一场发布会～&lt;/p&gt;
&lt;p&gt;闲来无事就准备对这次&lt;s&gt;发布会&lt;/s&gt;MIUI 12 吐吐槽 😆&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="https://blog.isteed.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="水" scheme="https://blog.isteed.cc/tags/%E6%B0%B4/"/>
    
    <category term="MIUI" scheme="https://blog.isteed.cc/tags/MIUI/"/>
    
    <category term="Android" scheme="https://blog.isteed.cc/tags/Android/"/>
    
    <category term="MIUI 12" scheme="https://blog.isteed.cc/tags/MIUI-12/"/>
    
  </entry>
  
  <entry>
    <title>我「爱」学习 —— 下载钉钉直播 or 录播回放</title>
    <link href="https://blog.isteed.cc/post/fuck-dingtalk-live/"/>
    <id>https://blog.isteed.cc/post/fuck-dingtalk-live/</id>
    <published>2020-04-20T15:34:27.000Z</published>
    <updated>2021-03-27T13:22:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>万恶的钉钉，无法下载回放，自带的播放器<strong>锚点定位</strong>垃圾、无法<strong>旋转</strong>录播，最重要的是，还尼玛那么<strong>耗电</strong></p><p>即便这样，也不能阻挡我要更好的<strong>学习体验</strong>的步伐！</p><span id="more"></span><h1 id="目录">目录</h1><p><a href="#%E7%BC%98%E8%B5%B7">缘起</a><br><a href="#%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%9D%E8%B7%AF">分析&amp;思路</a><br><a href="#%E6%95%99%E7%A8%8B">教程</a><br><a href="#%E5%B0%BE%E5%B7%B4">尾巴</a></p><p>不想看原因、分析的话，直接跳到教程就行了 🤔</p><h1 id="缘起">缘起</h1><p>我亲爱的老师，上传了一个讲解录播，类似于这样的</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_1.jpg" alt="缘起1"></p><p>网页打开后是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_2.jpg" alt="缘起2"></p><p>竖着的！还一个多小时。。。你让我电脑情何以堪 🤣</p><p>突然想起老师有提醒让我们用手机竖着看，于是拿出了手机</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_3.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/reason_3.jpg" alt="缘起3"></p><p>？？？确定不是在逗我玩？？？<br>（注：这是钉钉经常出现的问题）</p><p>嗯。。。太难用了，干它就完事儿了！</p><h1 id="分析与思路">分析与思路</h1><h2 id="分析">分析</h2><p>这个录播是网页？那就 <kbd>fn</kbd> + <kbd>F12</kbd> 走起 😋</p><p>直接定位元素<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_1.jpg" alt="分析1"></p><p>发现直接有带个链接，初步锁定这为视频文件，但链接在新标签中提示 <code>Not Found</code> 后就跳转 钉钉首页 了（</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_2.jpg" alt="分析2"></p><p>查看网络页，发现加载完毕后依旧不断有视频数据载入，即可判定播放文件为 m3u8 格式</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_3.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_3.jpg" alt="分析3"></p><p>那么就简单了，刷新后即可获取文件 😋</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_4.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_4.jpg" alt="分析4"></p><p>双击文件下载下来，拖进 IINA 里发现无法播放 🤔</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_5.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_5.jpg" alt="分析5"></p><p>那么推测与 m3u8 文件链接后面的参数有关，完整复制 URL，粘贴进去成功播放 😆</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_6.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_6.jpg" alt="分析6"></p><p>至此，已经解决正常播放的问题了，IINA 设置旋转 90 度即可舒适的观看 😋</p><h2 id="新的想法">新的想法</h2><p>由此扩展下，那不就通过抓包来获取直播的视频文件，即可在第三方播放器上观看录播&amp;直播，体验肯定比 钉钉 自带的那个<strong>垃圾</strong>播放器好呢</p><p>看了一下，直播和直播回放也是这样的说，好耶</p><h1 id="教程">教程</h1><p><strong>注意</strong>：本文皆以 <strong>Android 系统</strong>或 <strong>macOS 系统</strong>进行教程演示，其它系统的<strong>部分步骤</strong>可能与本教程不同，请谅解</p><h2 id="录播链接类">录播链接类</h2><p>如果是上面的那种链接类录播的话，那就很简单，打开链接用电脑浏览器进入调试选项的网络页面，过滤关键字 <code>m3u8</code> 后复制链接地址获取播放 URL 即可<br>（可以使用 Google Chrome、Microsoft 新版 Edge、Safari、Mozilla FireFox 等浏览器）</p><p><strong>图片教程</strong>：<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_1_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_1_1.jpg" alt="教程1"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_1_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_1_2.jpg" alt="教程2"></p><hr><p>若需要在线播放的话，<a href="#%E6%92%AD%E6%94%BE">请点击此处跳转</a></p><p>若需要下载的话，<a href="#%E4%B8%8B%E8%BD%BD">请点击此处跳转</a></p><h2 id="直播-or-直播回放">直播 or 直播回放</h2><h3 id="Android">Android</h3><p><strong><em>直播</em></strong></p><p>使用 <a href="https://www.coolapk.com/apk/app.greyshirts.sslcapture">无 root 抓包</a>，<strong>无需</strong>安装证书（Android 端 http 请求中就包含了直播 or 直播回放 URL）</p><p>钉钉进入直播（聊天）页面，切换到抓包，点击右上角的开始抓包，切换回钉钉，点击播放按钮，待加载完毕后返回抓包，停止。</p><p>接下来查看抓包结果<br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_2_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_2_1.jpg" alt="教程1"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_2_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_2_2.jpg" alt="教程2"></p><p>注意：<strong>直播视频</strong>后缀为 <strong>flv</strong>，<strong>回放</strong>则为 <strong>m3u8</strong></p><p>根据上面来筛选获取 直播 URL，注意，直播 URL 时长与直播进度有关，下载时也不会显示进度条</p><hr><p><strong><em>直播回放</em></strong><br>需要软件与上面一致但钉钉页面变更为<strong>直播回放</strong>页面，除<strong>文件后缀</strong>为 m3u8 外，其它步骤大致与上面相同</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_3_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_3_1.jpg" alt="教程1"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_3_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_3_2.jpg" alt="教程2"></p><hr><p>若需要在线播放的话，<a href="#%E6%92%AD%E6%94%BE">请点击此处跳转</a></p><p>若需要下载的话，<a href="#%E4%B8%8B%E8%BD%BD">请点击此处跳转</a></p><h3 id="macOS">macOS</h3><p>使用 <a href="https://pan.isteed.cc/MacSoftware/Charles">Charles</a> <a href="https://www.charlesproxy.com/">官网</a></p><p>下载并安装。由于抓的是 HTTPS，需要安装证书，在软件菜单 <code>Help</code> - <code>SSL Proxying</code> - <code>Install Charles Root Certificate</code><br><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_1.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_1.jpg" alt="教程1"></p><p>稍后便会打开钥匙串，若无法添加可尝试将证书拖动到「登陆」页</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_2.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_2.jpg" alt="教程2"></p><p>然后在软件菜单中的 <code>Proxy</code> - <code>SSL Proxying Settings</code> - <code>SSL Proxying</code> 中，勾选 <code>Enable SSL Proxying</code>，并在 <code>Include</code> 中 Add 一个 Host 为 <code>*</code>（这个是通配符）Prot 为 <code>443</code>（SSL 所使用的端口）</p><p>最后使 <code>Proxy</code> 选卡项中的 <code>macOS Proxy</code> 勾选即可。</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_3.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_3.jpg" alt="教程3"></p><p>接下来打开钉钉，打开你要下载的直播回放 or 正在进行的直播，待加载完毕后返回 Charles，找到有带 <code>alicdn.com</code> 的请求，一般请求的二级域名为 <code>dtliving-pre</code> 或 <code>aliliving-pre</code>，若请求太多，在 <code>Filter</code> 中 填入 <code>alicdn</code> 即可</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_4.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_4.jpg" alt="教程4"></p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_5.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/tutorial_4_5.jpg" alt="教程5"></p><p>最后双击 <code>URL</code> 的 <code>Value</code> 栏，那便是我们要的东西了，接下来粘贴至 <code>IINA</code> 播放或使用 <code>ffmepg</code> 下载即可。</p><hr><p>若需要在线播放的话，<a href="#%E6%92%AD%E6%94%BE">请点击此处跳转</a></p><p>若需要下载的话，<a href="#%E4%B8%8B%E8%BD%BD">请点击此处跳转</a></p><h3 id="Windows">Windows</h3><p>Windows？我手上木有 Windows 的电脑做演示，不过大致操作与 macOS 的相同，可以使用 <a href="https://www.charlesproxy.com/">Charles</a> 或 <a href="https://www.telerik.com/fiddler">Fiddler</a> 进行抓包。</p><p>思路也与上面的一致</p><h1 id="播放">播放</h1><h2 id="macOS-2">macOS</h2><p>可以使用 <a href="https://isteed.cc/posts/1520103949/#iina"><strong>IINA</strong></a>（推荐）或 <a href="https://www.videolan.org/vlc/index.zh.html">VLC</a> 等播放器播放</p><p>也可以使用支持 <strong>m3u8</strong> <strong>格式</strong>的浏览器播放</p><h2 id="Windows-2">Windows</h2><p>可以使用 <a href="https://www.videolan.org/vlc/index.zh.html">VLC</a> 等播放器播放</p><p>也可以使用支持 <strong>m3u8</strong> <strong>格式</strong>的浏览器播放</p><h2 id="Linux">Linux</h2><p>可以使用 <a href="https://www.videolan.org/vlc/index.zh.html">VLC</a> 等播放器播放</p><p>也可以使用支持 <strong>m3u8</strong> <strong>格式</strong>的浏览器播放</p><h2 id="Android-2">Android</h2><p>可以使用 <a href="https://pan.isteed.cc/AndroidSoftware/MX_Player/">MX Player</a> 或 <a href="https://www.videolan.org/vlc/index.zh.html">VLC</a> 等播放器播放</p><p>也可以使用支持 <strong>m3u8</strong> <strong>格式</strong>的浏览器播放</p><h2 id="iOS">iOS</h2><p>可以使用 <a href="https://www.videolan.org/vlc/index.zh.html">VLC</a> 等播放器播放</p><p>也可以使用支持 <strong>m3u8</strong> <strong>格式</strong>的浏览器播放</p><h1 id="下载">下载</h1><h2 id="macOS-等桌面平台">macOS 等桌面平台</h2><p>那么想要下载下来看怎么办呢？这时候就可以祭出万能的 Ffmpeg 了（安卓(Android) 平台<a href="#android%e5%ae%89%e5%8d%93">请点击此处跳转</a></p><p>macOS 下安装的话，终端输入：<code>brew install ffmpeg</code> （前提是你安装了 <a href="https://brew.sh/">Homebrew</a></p><p>其它系统的话，看 <a href="https://ffmpeg.org/">ffmpeg</a> <a href="https://ffmpeg.org/">官网介绍</a></p><p>安装完成后，使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i https://dtliving-pre.alicdn.com/live/ -c copy 1.mp4</span><br></pre></td></tr></table></figure><p>其中</p><blockquote><p><code>https://dtliving-pre.alicdn.com/live/</code> 是上文完整复制的 URL<br><code>1.mp4</code> 是要存储的文件名</p></blockquote><p>等待一会儿，即可下载为普通的视频文件（速度由网速决定和视频文件大小决定</p><p><img src="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_7.jpg" class="lazy" data-srcset="https://cdn.jsdelivr.net/gh/lufsx/res@master/img/fuck-dingtalk-live/analysis_7.jpg" alt="分析7"></p><h2 id="Android（安卓）">Android（安卓）</h2><p><s>网上可以搜索到各类 m3u8 下载器</s>~~（关键词 m3u8）~~<br>个人极其<strong>不推荐</strong>百毒到个<strong>各种东西</strong>，可以使用 <a href="https://www.coolapk.com/apk/idm.internet.download.manager.plus">IDM+</a> 下载，将链接粘贴进去即可</p><h2 id="扩展">扩展</h2><p>手动输入命令下载太难受了，尤其是想批量下载回放的时候。。。</p><p>突然想起来我之前有写一个批量测速脚本，拿来稍微改改就可以用了 😋</p><p>（需要手动抓到地址，然后将其写入文件，一行一个地址</p><p>下面贴代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">file=<span class="variable">$&#123;0%/*&#125;</span>/1.txt <span class="comment"># 这里是上面提到的文件路径</span></span><br><span class="line">const=$(awk <span class="string">&#x27;&#123;print NR&#125;&#x27;</span> <span class="variable">$file</span> | tail -n1) <span class="comment"># 获取这个文件总共有多少行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq <span class="variable">$&#123;const&#125;</span>` <span class="comment"># 从一循环到行数，并赋值到 n</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ffmpeg -i `sed -n <span class="string">&quot;<span class="variable">$&#123;n&#125;</span>p&quot;</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span>` -c copy <span class="variable">$&#123;0%/*&#125;</span>/<span class="variable">$&#123;n&#125;</span>.mp4 <span class="comment"># 获取对应行并将其合并为一个视频 # 20.04.23 更新，将视频文件存储到脚本所在的目录</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>回车！舒服！不愧是阿里云提供的支持，速度几乎全程跑满 😆</p><h1 id="尾巴">尾巴</h1><h2 id="吐槽">吐槽</h2><p>钉钉那家伙，估计是调用 网页 的，以至于在 macOS 还偶尔回弹出保存为 xxx.html 的提示框 💦</p><p>手机上嘛，看会儿直播就烫的要死，哎。。。调用软解无误了，这也就算了，还常常出现些莫名其妙的 <code>feature</code></p><p>钉钉团队也是真的厉害，做到了全平台统一、一致的烂体验</p><h2 id="碎碎念">碎碎念</h2><p>这篇教程嘛，看钉钉那家伙自带的播放器不爽写得～</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;万恶的钉钉，无法下载回放，自带的播放器&lt;strong&gt;锚点定位&lt;/strong&gt;垃圾、无法&lt;strong&gt;旋转&lt;/strong&gt;录播，最重要的是，还尼玛那么&lt;strong&gt;耗电&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即便这样，也不能阻挡我要更好的&lt;strong&gt;学习体验&lt;/strong&gt;的步伐！&lt;/p&gt;</summary>
    
    
    
    <category term="分享" scheme="https://blog.isteed.cc/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="macOS" scheme="https://blog.isteed.cc/tags/macOS/"/>
    
    <category term="DingTalk" scheme="https://blog.isteed.cc/tags/DingTalk/"/>
    
    <category term="抓包" scheme="https://blog.isteed.cc/tags/%E6%8A%93%E5%8C%85/"/>
    
    <category term="钉钉" scheme="https://blog.isteed.cc/tags/%E9%92%89%E9%92%89/"/>
    
    <category term="直播回放" scheme="https://blog.isteed.cc/tags/%E7%9B%B4%E6%92%AD%E5%9B%9E%E6%94%BE/"/>
    
    <category term="Charles" scheme="https://blog.isteed.cc/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>关于微信、QQ 存储目录变更的一些思考</title>
    <link href="https://blog.isteed.cc/post/think-about-change-of-tencent/"/>
    <id>https://blog.isteed.cc/post/think-about-change-of-tencent/</id>
    <published>2020-04-20T06:29:29.000Z</published>
    <updated>2020-04-20T10:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 上，在各类大厂应用和一堆 SDK 联合下，Android 的内置存储文件夹「日益增长」着。</p><span id="more"></span><p>与 iOS 的 沙盒机制 不同，Android 拥有更加开放、互通的模式，但这也带来了非常严重的问题，比如各类第三方 SDK 争先恐后的将各种<strong>用户标识文件</strong>（唯一用户 ID）、<strong>实时缓存</strong>甚至<strong>应用数据</strong>都往「内置存储」的根目录下塞着，成百上千个文件夹便充斥着手机的内置存储。</p><h1 id="微信、QQ-的改动">微信、QQ 的改动</h1><p>2020.03.02 QQ 发布了「关于 QQ 文件本地存储路径变更的公告」，即 QQ 将其原先在内置存储中的文件夹统一迁移到 QQ 的应用私有文件夹 <code>/Android/data/com.tencent.mobileqq/</code> 下</p><p>微信则在 7.0.13.2 内测版中，也像 QQ 一样将其在内置存储中的文件迁移到微信的应用私有文件夹 <code>/Android/data/com.tencent.mm/</code> 下</p><h2 id="个人对此改动的看法">个人对此改动的看法</h2><p>微信、QQ 的改动虽然在一定程度上「遵循」了规范，且在改动上为用户带来了不便，即查看微信、QQ 所保存的文件由原先的 <code>/Tencent/</code> 变更为 <code>/Android/data/应用包名</code> 的对应目录下，大大降低了文件搜寻效率。而且在应用写在时，所下载、接受的文件也会一并消失，这显然是不对的。</p><p>完全遵守规范应该将应用所要存储的文件、图片、文档、音乐等保存在对应的「标准文件夹下」。依照用户使用习惯，更好的做法是在「标准文件夹」下创建一个能识别对应用名称的文件夹，再将应用文件<strong>保存在</strong>此目录下。</p><p>微信、QQ 非常精明的避开了「完全遵循规范」，只是说明「根据规范」而作出改动，这种不完全遵守可不是什么好现象。。。不仅如此，这还容易让对此感到不便的人把矛头从<strong>应用本身</strong>指向「<strong>规范</strong>」，实在是「高明」的话术啊。</p><h2 id="该改动的实际表现">该改动的实际表现</h2><p>将原先的文件夹原封不动的移动到应用私有文件夹，且在私有文件夹下，原来的文件目录、结构完全不变，这就是 腾讯团队 所偷的懒，在应用私有文件夹下，分明可以将<strong>日志</strong>、<strong>缓存</strong>等文件完全移动至其私有文件夹下的 <code>cache</code> 文件夹下，以便用户或系统在存储空间不足的情况下<strong>轻松释放空间</strong>。</p><p>但是，在授予 QQ 存储权限后，便原形毕露，在存储空间里疯狂「拉屎」。也就是说，对于 QQ 来说此改动只是能让你<strong>选择拒绝</strong>存储权限使用而已。</p><p>最严重的是，在 Android 11 DP 上（目前最新为 DP2.1），用户无法通过「常规手段」访问 <code>/Android/</code> 目录（包括 root shell），且对于目标 SDK 为 11 的应用，<code>/Android/</code> 便是真正的私有文件夹，应用只能访问属于自己的那一份。</p><h2 id="我对此的期望">我对此的期望</h2><p>真正难以抑制的是各类应用疯狂使用的第三方 SDK 所产生的文件，众多应用都接入一个 SDK，那么那些应用所产生文件，即使在你删除后，也会迅速都重建，几乎与无法删除划等号。</p><p>现在也有许多 SDK 滥用 <code>/Android/</code> 文件夹，在这里面建立起<strong>用户标识文件</strong>、<strong>推送日志</strong>等「垃圾」。比如「友盟」便会在 <code>/Android/data/.um/</code>、<code>/Android/obj/.um/</code> 等目录下建立用户标识文件，以便与跟踪用户。淘宝甚至还会在 <code>/Android/data/pushSdk/</code> 下存储推送日志文件。</p><p>希望各类应用能将所接入 SDK 产生的文件重定向至私有文件夹，例如「MT 管理器」、「纯纯写作」都将支付宝 SDK 所产生的文件重定向至应用私有文件夹中，这不仅避免了内置存储的混乱，也让第三方 SDK 功能能够<strong>正常</strong>使用。<s>最根本的应该是第三方 SDK</s></p><p>Android 生态虽说在<strong>慢慢</strong>改善，但力度总是不够大，鉴于 Android 的性质以及它所涉及到的庞大领域，各种应用不能有效的、及时的适配。也由于 Android 的开放性和非强制性，大厂们自觉的推行新规范是极其缓慢的，而不像隔壁 iOS 那样的 App Store 强制审核那么激进，iOS 每代都有大改，却因强制措施使得其应用们「与时俱进」。Android 在慢慢的收紧权限的管控、慢慢的规范应用行为，这次期待 Android 11 的改变。</p><h1 id="尾巴">尾巴</h1><p>这篇文章是一时兴起写的，仅仅写些个人对这些东西的思考，写的可能有所遗漏、不准确。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Android 上，在各类大厂应用和一堆 SDK 联合下，Android 的内置存储文件夹「日益增长」着。&lt;/p&gt;</summary>
    
    
    
    <category term="思考" scheme="https://blog.isteed.cc/categories/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="Android 10" scheme="https://blog.isteed.cc/tags/Android-10/"/>
    
    <category term="Android 11" scheme="https://blog.isteed.cc/tags/Android-11/"/>
    
    <category term="android" scheme="https://blog.isteed.cc/tags/android/"/>
    
    <category term="WeChat" scheme="https://blog.isteed.cc/tags/WeChat/"/>
    
    <category term="QQ" scheme="https://blog.isteed.cc/tags/QQ/"/>
    
  </entry>
  
</feed>
